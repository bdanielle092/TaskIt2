[{"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js":"1","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js":"2","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js":"3","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js":"6","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js":"7","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js":"8","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js":"9","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js":"10","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js":"11","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js":"12","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js":"13","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js":"14","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js":"15","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js":"16","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js":"17","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js":"18","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js":"19","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js":"20","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js":"21","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js":"22","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js":"23","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js":"24","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js":"25","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\DeleteSubTask.js":"26","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskEditForm.js":"27","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\PriorityProvider.js":"28"},{"size":716,"mtime":1612459642743,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1040,"mtime":1616170772930,"results":"32","hashOfConfig":"30"},{"size":3995,"mtime":1616374627394,"results":"33","hashOfConfig":"30"},{"size":3624,"mtime":1614482410135,"results":"34","hashOfConfig":"30"},{"size":1969,"mtime":1616374545097,"results":"35","hashOfConfig":"30"},{"size":2536,"mtime":1614482401009,"results":"36","hashOfConfig":"30"},{"size":3800,"mtime":1612459642757,"results":"37","hashOfConfig":"30"},{"size":2157,"mtime":1616469188300,"results":"38","hashOfConfig":"30"},{"size":3805,"mtime":1616368948822,"results":"39","hashOfConfig":"30"},{"size":4460,"mtime":1615997300379,"results":"40","hashOfConfig":"30"},{"size":2644,"mtime":1616384876142,"results":"41","hashOfConfig":"30"},{"size":3350,"mtime":1616387251578,"results":"42","hashOfConfig":"30"},{"size":4293,"mtime":1616444043404,"results":"43","hashOfConfig":"30"},{"size":2109,"mtime":1616460512342,"results":"44","hashOfConfig":"30"},{"size":4293,"mtime":1616462161899,"results":"45","hashOfConfig":"30"},{"size":3339,"mtime":1616430902640,"results":"46","hashOfConfig":"30"},{"size":4567,"mtime":1616462047789,"results":"47","hashOfConfig":"30"},{"size":6006,"mtime":1616431229888,"results":"48","hashOfConfig":"30"},{"size":2449,"mtime":1616371724994,"results":"49","hashOfConfig":"30"},{"size":5701,"mtime":1616476147272,"results":"50","hashOfConfig":"30"},{"size":3937,"mtime":1616106489846,"results":"51","hashOfConfig":"30"},{"size":1393,"mtime":1616371873393,"results":"52","hashOfConfig":"30"},{"size":3881,"mtime":1616379665555,"results":"53","hashOfConfig":"30"},{"size":4248,"mtime":1616372878168,"results":"54","hashOfConfig":"30"},{"size":2628,"mtime":1616374127579,"results":"55","hashOfConfig":"30"},{"size":5601,"mtime":1616432315883,"results":"56","hashOfConfig":"30"},{"size":2912,"mtime":1616170726342,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"v3c2y3",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"60"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"60"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"60"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"60"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"60"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js",[],["123","124"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js",["125"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js",["126","127"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { Col } from \"reactstrap\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport TaskList from \"../Task/TaskList\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport \"./Board.css\"\r\n\r\n//this whole thing is a method and we are passing the properties. Then we are exporting it at the end so we can use in in other components \r\nconst Board = ({ props }) => {\r\n    //bringing in the methods from BoardProvider with useContext\r\n    //we bringing in board object to get the properties of a board \r\n    const { board, getBoardById } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from application view\r\n    const { boardId } = useParams();\r\n    //bringing in methods from TaskProvider using TaskContext \r\n    //we bringing tasks to get the properties of the tasks \r\n    const { getTasks, tasks } = useContext(TaskContext);\r\n    //useHistory allows you undo or redo things in your app.\r\n    //an example in this page is we can go back to pervious page if we decide we don't want to be on the board card. \r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //getTasks get the task on a board\r\n    //getBoardById is getting the board info for a single board\r\n    //this get the board name by getting board by Id\r\n    useEffect(() => {\r\n        getBoardById(boardId)\r\n        getTasks(boardId);\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    // we use history.push to take the user to the add task form \r\n    const goToTaskForm = () => {\r\n        history.push(`/Board/${boardId}/TaskForm`);\r\n    }\r\n    //In this return 1. we have a back arrow icon which takes the use back to the previous page\r\n    //2. We display the name of the board we are on \r\n    //3. we have an add icon which take the user to the add task form \r\n    //4. We display the list of tasks on this board\r\n    //last we export the board so we can import it in other components\r\n    return (\r\n        <div>\r\n            <div className='icons'>\r\n                <Link to={\"/\"}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        board={board}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n\r\n            <h3 className=\"BoardName\">{board.name} Board</h3>\r\n            <p className=\"NumberOfTask\">Total Tasks: {tasks.length}</p>\r\n\r\n            <div className='BoardContainer'>\r\n                <p className=\"AddTaskName\">Add Task</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToTaskForm}\r\n                    className='task-plus-icon' />\r\n            </div>\r\n\r\n\r\n            <Col className=\"listOfTasks\" >\r\n                <TaskList tasks={tasks} />\r\n            </Col>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Board","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js",["128"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js",["129"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js",["130","131","132"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js",["133"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport SubTaskList from \"../SubTask/SubTaskList\";\r\nimport { Col } from \"reactstrap\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\n\r\n\r\n//defining Task function passing the properties of task object\r\nconst Task = ({ props }) => {\r\n    //bringing the method and task object from TaskContext by  using useContext\r\n    const { getTaskById, task } = useContext(TaskContext)\r\n    //using useParams to get the taskId from application views\r\n    const { taskId, boardId } = useParams();\r\n    //bringing the methods from SubTaskContext by using useContext\r\n    const { getSubTasks, subTasks } = useContext(SubTaskContext)\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //getTaskById is getting the task info for a single task \r\n    //getSubTasks get the subtask on a task\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n        getSubTasks(taskId)\r\n\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    // we use history.push to take the user to the add task form \r\n    const goToSubTaskForm = () => {\r\n        history.push(`/Board/${boardId}/task/${taskId}/SubTaskForm`);\r\n    }\r\n\r\n\r\n    //return 1.back arrow icon to take the user back to the board they were on. I used the Link to go back to the board page\r\n    //2. Name Of task header\r\n    //3.Notes header\r\n    //4. paragraph tag to display the notes\r\n    //5.Name of subTask header\r\n    //6. list of subTask\r\n    //7. Priority header\r\n    //8. number of the priority the user pick\r\n    //9. date created header and dated created info \r\n    //export the Task so it can be used in other component\r\n    return (\r\n        <div>\r\n\r\n            <div className='icons'>\r\n                <Link to={`/board/${boardId}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        task={task}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3 className=\"TaskName\">{task.name} Task</h3>\r\n            <h3>Notes</h3>\r\n            <p>{task.notes}</p>\r\n            <h3>SubTask</h3>\r\n            <div className='BoardContainer'>\r\n                <p className=\"AddSubTaskName\">Add SubTask</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToSubTaskForm}\r\n                    className='subTask-plus-icon' />\r\n            </div>\r\n            <Col className=\"listOfSubTasks\">\r\n                <SubTaskList subTasks={subTasks} />\r\n            </Col>\r\n            <h3>Priority</h3>\r\n            <p>{task.priorityId}</p>\r\n\r\n\r\n\r\n\r\n            <h3>Date Created: {task.dateCreated}</h3>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Task","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js",["134"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n//defining the taskForm and not passing anything\r\nconst TaskForm = () => {\r\n    //brining in the add function from TaskContext using useContext\r\n    const { addTask } = useContext(TaskContext)\r\n    //we bringing in board object to get the properties of a board \r\n    const { board } = useContext(BoardContext)\r\n    //task is the state of the object and setTask allow us to update the Task\r\n    //useState I am saying the state of the task is an empty string\r\n    const [task, setTask] = useState({ name: \"\", note: \"\", priorityId: 1, isComplete: false, dateTime: \"\" })\r\n    //useParams gets the boardId from application views\r\n    const { boardId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex. history.push takes the user back to the board page\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n\r\n    //useEffect for createBoardId function \r\n    //this allow the user to add a task to a board with the boardId\r\n    useEffect(() => {\r\n\r\n        const createBoardId = () => {\r\n            //making a copy of task \r\n            const newTask = task\r\n            //then setting the boardId to current boardId\r\n            newTask[\"boardId\"] = boardId\r\n            //updating state\r\n            setTask(newTask);\r\n        }\r\n        //calling the function \r\n        createBoardId();\r\n    }, [])\r\n\r\n\r\n    //this is updating the task and setting it as the new task and parsing the priority\r\n    //The parseInt function converts its first argument to a string, parses that string, then returns an integer or NaN\r\n    const handleSubmit = (evt) => {\r\n        //stops the user from pushing the button multiply times\r\n        evt.preventDefault()\r\n        //making a copy of task called newTask\r\n        const newTask = { ...task };\r\n        //task is an object with properties.\r\n        //set the property to the new value using the  bracket notation\r\n        newTask[evt.target.id] = evt.target.value;\r\n        //paring the priorityId so it comes back as a number and not a string\r\n        newTask.priorityId = parseInt(newTask.priorityId)\r\n        //updating the newTask\r\n        setTask(newTask);\r\n\r\n    }\r\n    //this is creating the new task in the database then taking us back to the board we are currently on \r\n    const createNewTask = (evt) => {\r\n        //if else statement to make sure they enter a name\r\n        if (task.name === \"\") {\r\n            alert(\"Please enter a Task Name\")\r\n\r\n        } else {\r\n            //invoke addTask passing boardId and task as an argument.\r\n            //once complete, go back to the board page \r\n            addTask(boardId, task)\r\n            history.push(`/board/${boardId}`);\r\n        }\r\n    };\r\n\r\n    //function for createDate\r\n    const createDate = () => {\r\n        //making a copy of task\r\n        const updateTaskDate = task\r\n        //then setting the date to current day and time\r\n        updateTaskDate[\"dateTime\"] = Date.now()\r\n        //updating state\r\n        setTask(updateTaskDate)\r\n    }\r\n\r\n    //return 1. input fields to for name, notes, and priority\r\n    //2. submit button with an onClick calling the createDate and CreateNewTask function \r\n    //.3 cancel button that takes the user back to the board they were on. I used the Link to take the back to boards\r\n    //export BoardForm so they can be use on other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Task Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter new task name\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"notes\">Notes</Label>\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                placeholder=\"Enter notes\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"priority\">Choose a Priority</Label>\r\n                            <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                id=\"priorityId\"\r\n                                value={task.priorityId}\r\n                                onChange={(evt) => handleSubmit(evt)}>\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n\r\n                            </select>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning\"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createDate();\r\n                            createNewTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\nexport default TaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js",["135"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n\r\nexport default function DeleteTask() {\r\n    //bringing in the methods and task object from TaskContext using useContext\r\n    const { task, deleteTask, getTaskById } = useContext(TaskContext);\r\n    //bringing in the board object \r\n    const { board } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from ApplicationView\r\n    const { taskId } = useParams();\r\n    //useHistory will allow us to undo/redo and change or navigate to other pages\r\n    //ex. I use history to take the user back to the board page after deleting a task\r\n    const history = useHistory();\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    useEffect(() => {\r\n        getTaskById((taskId))\r\n    }, [])\r\n\r\n    //deleteThisTask function. We delete the board and push it back to the board page.\r\n    const deleteThisTask = () => {\r\n        deleteTask(taskId)\r\n        history.push(`/board/${board.id}`)\r\n    }\r\n\r\n    //return 1. Ask the user if they are user they want to delete this task\r\n    //2. letting them know this can not be undone\r\n    //3. button to delete the task. onClick that calls the deleteThisTask function.\r\n    //4. cancel button that takes the user back to the board page they were on . I used the Link to go back to the board\r\n    //export the DeleteTask so we can use it in other components\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {task.name} Task ?</h3>\r\n                <h5>This can not be undone and all SubTask on this Task will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisTask}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js",["136"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js",["137"],"import React, { useContext, useEffect } from \"react\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\n\r\n\r\n//defining SubTask function passing the properties of task object\r\nconst SubTask = ({ props }) => {\r\n    //bring in the object subTask and the function getSubTaskById with use context\r\n    const { subTask, getSubTaskById } = useContext(SubTaskContext)\r\n    //getting the subTaskId from application views\r\n    const { subTaskId, boardId, taskId } = useParams();\r\n\r\n    //this useEffect is getting the subTaskById which allows us to get the properties on the subTask like the name\r\n    useEffect(() => {\r\n\r\n        getSubTaskById(subTaskId)\r\n\r\n    }, [])\r\n\r\n    //return 1. back button which take the user back to the task they  were on. I used the Link to go back to task\r\n    //2.subTask name\r\n    return (\r\n        <div>\r\n            <div className='icons'>\r\n                <Link to={`/board/${boardId}/task/${taskId}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        subtask={subTask}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3>{subTask.name} SubTask</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default SubTask;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js",["138","139"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport \"./subTask.css\"\r\n\r\n\r\n//defining the SubTaskList and passing the subTask object\r\nconst SubTaskList = ({ subTasks }) => {\r\n\r\n    //bringing in the function getTaskById with useContext\r\n    const { getTaskById, } = useContext(TaskContext)\r\n    //bring in the methods from SubTaskContext with useContext \r\n    const { SubTaskToggle } = useContext(SubTaskContext)\r\n    //getting the task and board id from application  view\r\n    const { taskId, boardId } = useParams();\r\n\r\n\r\n    //useEffect to get the TaskById to get the subtask on the task page\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, []);\r\n\r\n    //function to check if the task is done true or false not done. bringing in the toggle function. the !check means it will do the opposite of what is \r\n    const Checked = (subTaskId, isComplete) => {\r\n\r\n        if (isComplete === true) {\r\n            return SubTaskToggle(taskId, subTaskId, false)\r\n        }\r\n        else {\r\n            return SubTaskToggle(taskId, subTaskId, true)\r\n        }\r\n    }\r\n    //return 1. mapping through the subtask \r\n    //2. Link to subtask.js\r\n    //3. checkbox to mark a task complete\r\n    //4. edit icon I use a link to take the user to the SubtaskEditForm\r\n    //5. delete icon I use a link to take the user to the delete form \r\n    //exporting the subTaskList so it can be use in other components\r\n    return (\r\n        <div>\r\n\r\n            {subTasks.map((subTask) => (\r\n                <div key={subTask.id}>\r\n                    <Row>\r\n\r\n                        <Col xs=\"3\">\r\n                            <div className={subTask.isComplete ? \"SubTask strike\" : \"SubTask\"}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={subTask.id}\r\n                                    name=\"IsComplete\"\r\n                                    checked={subTask.isComplete}\r\n                                    onChange={() => (Checked(subTask.id, subTask.isComplete))} />\r\n                                {subTask.name}\r\n                                {/* <Link to={`/board/${boardId}/task/${subTask.taskId}/subTask/${subTask.id}`}>\r\n                                <strong>{subTask.name}</strong>\r\n                            </Link> */}\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/board/${boardId}/task/${taskId}/SubTaskEditForm/${subTask.id}`}>\r\n                                <FiEdit\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    subtask={subTask}\r\n                                    className='edit-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/DeleteSubTask/${subTask.id}`}>\r\n                                <RiDeleteBin5Line\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    className='delete-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row><br></br></Row>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubTaskList;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js",["140","141","142"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\n\r\n\r\n\r\nconst SubTaskForm = () => {\r\n    // bringing in add method from SubTaskContext using useContext\r\n    const { addSubTask } = useContext(SubTaskContext)\r\n    // const { task } = useContext(TaskContext);\r\n    // const { board } = useContext(BoardContext);\r\n    //setting state and updating state\r\n    const [subTask, setSubTask] = useState({ name: \"\", isComplete: false });\r\n    //getting ids from application views\r\n    const { taskId, boardId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex. history.push takes the user back to the task page\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect for createTaskId function \r\n    //this allow the user to add a subTask to a task with the taskId and  boardId\r\n    useEffect(() => {\r\n        const createTaskId = () => {\r\n            //making a copy of subtask\r\n            const newSubTask = subTask\r\n            //then setting the taskId to current taskId\r\n            newSubTask[\"taskId\"] = taskId\r\n            //then setting the boardId to current boardId\r\n            newSubTask[\"boardId\"] = boardId\r\n            //updating state\r\n            setSubTask(newSubTask);\r\n\r\n        }\r\n        //calling the function \r\n        createTaskId();\r\n    }, [])\r\n\r\n    //updating the subTask and setting the new subTask\r\n    const handleSubmit = (evt) => {\r\n        //stops the user from push the button multiple times\r\n        evt.preventDefault()\r\n        //makes a copy of subtask\r\n        const newSubTask = { ...subTask };\r\n        //Subtask is an object with properties\r\n        //set the property to the new value using bracket notation\r\n        newSubTask[evt.target.id] = evt.target.value;\r\n        //updating state\r\n        setSubTask(newSubTask)\r\n    }\r\n\r\n    //function to make a new subTask and saving it to the database\r\n    const createNewSubTask = () => {\r\n        //if else statement alerts a user to add a name if they leave it empty\r\n        if (subTask.name === \"\") {\r\n            alert(\"Please enter a SubTask Name\")\r\n            //invoke addSubTask passing subTask and taskId  argument.\r\n            //once complete, go back to the task page \r\n        } else {\r\n            addSubTask(subTask, taskId)\r\n            history.push(`/board/${boardId}/task/${taskId}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    //return 1. input fields to for name\r\n    //2. submit button with an onClick calling the CreateNewSubTask function \r\n    //.3 cancel button that takes the user back to the task they were on. I used the Link to take the back to tasks\r\n    //export SubTaskForm so they can be use on other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">SubTask Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter a subTask\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createNewSubTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                </Button>\r\n                    <Link to={`/board/${boardId}/task/${taskId}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\nexport default SubTaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\DeleteSubTask.js",["143"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\"\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\nexport default function DeleteSubTask() {\r\n    //brining in methods and subTask object from SubTaskContext from useContext\r\n    const { subTask, deleteSubTask, getSubTaskById } = useContext(SubTaskContext);\r\n    //bringing in the task object \r\n    const { task } = useContext(TaskContext)\r\n    //bringing in the board object \r\n    const { board } = useContext(BoardContext)\r\n    //useParams allow us to get the boardId from ApplicationView\r\n    const { subTaskId } = useParams();\r\n    //useHistory will allow us to undo/redo and change or navigate to other pages\r\n    //ex. I use history to take the user back to the task page after deleting a subTask\r\n    const history = useHistory();\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    useEffect(() => {\r\n        getSubTaskById((subTaskId))\r\n    }, [])\r\n\r\n    //deleteThisSubTask function. We delete the subTask and push it back to the task page.\r\n    const deleteThisSubTask = () => {\r\n        deleteSubTask(subTaskId)\r\n        history.push(`/board/${board.id}/task/${task.id}`)\r\n    }\r\n\r\n    //return 1. Ask the user if they are user they want to delete this subTask\r\n    //2. letting them know this can not be undone\r\n    //3. button to delete the subTask. onClick that calls the deleteThisSubTask function.\r\n    //4. cancel button that takes the user back to the task page they were on . I used the Link to go back to the task\r\n    //export the DeleteSubTask so we can use it in other components\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {subTask.name} SubTask ?</h3>\r\n                <h5>This can not be undone</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisSubTask}>\r\n                        Delete\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}/task/${task.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskEditForm.js",["144","145"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\PriorityProvider.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":27,"column":8,"nodeType":"152","endLine":27,"endColumn":10,"suggestions":"153"},{"ruleId":"154","severity":1,"message":"155","line":1,"column":40,"nodeType":"156","messageId":"157","endLine":1,"endColumn":48},{"ruleId":"150","severity":1,"message":"158","line":36,"column":8,"nodeType":"152","endLine":36,"endColumn":10,"suggestions":"159"},{"ruleId":"150","severity":1,"message":"160","line":43,"column":8,"nodeType":"152","endLine":43,"endColumn":10,"suggestions":"161"},{"ruleId":"150","severity":1,"message":"162","line":20,"column":8,"nodeType":"152","endLine":20,"endColumn":10,"suggestions":"163"},{"ruleId":"154","severity":1,"message":"164","line":1,"column":29,"nodeType":"156","messageId":"157","endLine":1,"endColumn":38},{"ruleId":"154","severity":1,"message":"155","line":1,"column":40,"nodeType":"156","messageId":"157","endLine":1,"endColumn":48},{"ruleId":"154","severity":1,"message":"165","line":7,"column":10,"nodeType":"156","messageId":"157","endLine":7,"endColumn":22},{"ruleId":"150","severity":1,"message":"166","line":37,"column":8,"nodeType":"152","endLine":37,"endColumn":10,"suggestions":"167"},{"ruleId":"150","severity":1,"message":"168","line":48,"column":8,"nodeType":"152","endLine":48,"endColumn":10,"suggestions":"169"},{"ruleId":"150","severity":1,"message":"170","line":23,"column":8,"nodeType":"152","endLine":23,"endColumn":10,"suggestions":"171"},{"ruleId":"150","severity":1,"message":"160","line":46,"column":8,"nodeType":"152","endLine":46,"endColumn":10,"suggestions":"172"},{"ruleId":"150","severity":1,"message":"173","line":19,"column":8,"nodeType":"152","endLine":19,"endColumn":10,"suggestions":"174"},{"ruleId":"154","severity":1,"message":"155","line":1,"column":40,"nodeType":"156","messageId":"157","endLine":1,"endColumn":48},{"ruleId":"150","severity":1,"message":"170","line":26,"column":8,"nodeType":"152","endLine":26,"endColumn":10,"suggestions":"175"},{"ruleId":"154","severity":1,"message":"165","line":12,"column":10,"nodeType":"156","messageId":"157","endLine":12,"endColumn":22},{"ruleId":"154","severity":1,"message":"176","line":13,"column":10,"nodeType":"156","messageId":"157","endLine":13,"endColumn":21},{"ruleId":"150","severity":1,"message":"177","line":50,"column":8,"nodeType":"152","endLine":50,"endColumn":10,"suggestions":"178"},{"ruleId":"150","severity":1,"message":"173","line":24,"column":8,"nodeType":"152","endLine":24,"endColumn":10,"suggestions":"179"},{"ruleId":"150","severity":1,"message":"173","line":44,"column":8,"nodeType":"152","endLine":44,"endColumn":10,"suggestions":"180"},{"ruleId":"150","severity":1,"message":"181","line":50,"column":8,"nodeType":"152","endLine":50,"endColumn":10,"suggestions":"182"},"no-native-reassign",["183"],"no-negated-in-lhs",["184"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllBoards'. Either include it or remove the dependency array.","ArrayExpression",["185"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'boardId', 'getBoardById', and 'getTasks'. Either include them or remove the dependency array.",["186"],"React Hook useEffect has missing dependencies: 'boardId' and 'getToken'. Either include them or remove the dependency array.",["187"],"React Hook useEffect has missing dependencies: 'boardId' and 'getBoardById'. Either include them or remove the dependency array.",["188"],"'useEffect' is defined but never used.","'BoardContext' is defined but never used.","React Hook useEffect has missing dependencies: 'getSubTasks', 'getTaskById', and 'taskId'. Either include them or remove the dependency array.",["189"],"React Hook useEffect has missing dependencies: 'boardId' and 'task'. Either include them or remove the dependency array.",["190"],"React Hook useEffect has missing dependencies: 'getTaskById' and 'taskId'. Either include them or remove the dependency array.",["191"],["192"],"React Hook useEffect has missing dependencies: 'getSubTaskById' and 'subTaskId'. Either include them or remove the dependency array.",["193"],["194"],"'TaskContext' is defined but never used.","React Hook useEffect has missing dependencies: 'boardId', 'subTask', and 'taskId'. Either include them or remove the dependency array.",["195"],["196"],["197"],"React Hook useEffect has a missing dependency: 'subTask'. Either include it or remove the dependency array.",["198"],"no-global-assign","no-unsafe-negation",{"desc":"199","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"203","fix":"213"},{"desc":"214","fix":"215"},{"desc":"211","fix":"216"},{"desc":"217","fix":"218"},{"desc":"214","fix":"219"},{"desc":"214","fix":"220"},{"desc":"221","fix":"222"},"Update the dependencies array to be: [getAllBoards]",{"range":"223","text":"224"},"Update the dependencies array to be: [boardId, getBoardById, getTasks]",{"range":"225","text":"226"},"Update the dependencies array to be: [boardId, getToken]",{"range":"227","text":"228"},"Update the dependencies array to be: [boardId, getBoardById]",{"range":"229","text":"230"},"Update the dependencies array to be: [getSubTasks, getTaskById, taskId]",{"range":"231","text":"232"},"Update the dependencies array to be: [boardId, task]",{"range":"233","text":"234"},"Update the dependencies array to be: [getTaskById, taskId]",{"range":"235","text":"236"},{"range":"237","text":"228"},"Update the dependencies array to be: [getSubTaskById, subTaskId]",{"range":"238","text":"239"},{"range":"240","text":"236"},"Update the dependencies array to be: [boardId, subTask, taskId]",{"range":"241","text":"242"},{"range":"243","text":"239"},{"range":"244","text":"239"},"Update the dependencies array to be: [subTask]",{"range":"245","text":"246"},[987,989],"[getAllBoards]",[1813,1815],"[boardId, getBoardById, getTasks]",[1658,1660],"[boardId, getToken]",[879,881],"[boardId, getBoardById]",[1476,1478],"[getSubTasks, getTaskById, taskId]",[1721,1723],"[boardId, task]",[1160,1162],"[getTaskById, taskId]",[1858,1860],[775,777],"[getSubTaskById, subTaskId]",[991,993],[1713,1715],"[boardId, subTask, taskId]",[1329,1331],[1500,1502],[1609,1611],"[subTask]"]