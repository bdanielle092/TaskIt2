[{"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js":"1","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js":"2","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js":"3","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js":"6","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js":"7","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js":"8","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js":"9","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js":"10","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js":"11","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js":"12","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js":"13","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js":"14","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js":"15","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js":"16","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js":"17","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js":"18","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js":"19","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js":"20","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js":"21","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js":"22"},{"size":716,"mtime":1612459642743,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":770,"mtime":1612928332350,"results":"26","hashOfConfig":"24"},{"size":2219,"mtime":1612928332357,"results":"27","hashOfConfig":"24"},{"size":3596,"mtime":1612928332476,"results":"28","hashOfConfig":"24"},{"size":1881,"mtime":1612928332393,"results":"29","hashOfConfig":"24"},{"size":2536,"mtime":1612928332454,"results":"30","hashOfConfig":"24"},{"size":3800,"mtime":1612459642757,"results":"31","hashOfConfig":"24"},{"size":1316,"mtime":1612928332404,"results":"32","hashOfConfig":"24"},{"size":2592,"mtime":1612928332379,"results":"33","hashOfConfig":"24"},{"size":1628,"mtime":1612928332460,"results":"34","hashOfConfig":"24"},{"size":1784,"mtime":1612928332383,"results":"35","hashOfConfig":"24"},{"size":2248,"mtime":1613003299463,"results":"36","hashOfConfig":"24"},{"size":2314,"mtime":1613002514291,"results":"37","hashOfConfig":"24"},{"size":1449,"mtime":1612928332465,"results":"38","hashOfConfig":"24"},{"size":4077,"mtime":1612928332374,"results":"39","hashOfConfig":"24"},{"size":8662,"mtime":1612980535937,"results":"40","hashOfConfig":"24"},{"size":4475,"mtime":1612928332444,"results":"41","hashOfConfig":"24"},{"size":3180,"mtime":1612928332410,"results":"42","hashOfConfig":"24"},{"size":3077,"mtime":1612928332415,"results":"43","hashOfConfig":"24"},{"size":2857,"mtime":1613002565386,"results":"44","hashOfConfig":"24"},{"size":2473,"mtime":1612977189808,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"v3c2y3",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js",[],["101","102"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js",["103","104","105","106","107","108","109","110","111","112","113","114"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport {\r\n    Navbar,\r\n    Nav,\r\n    NavItem,\r\n    Button\r\n} from 'reactstrap';\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport logo from \"../images/logo2.png\";\r\nimport \"./Header.css\"\r\n\r\n\r\n\r\nconst Header = () => {\r\n    const { logout } = useContext(UserProfileContext);\r\n    const user = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const history = useHistory();\r\n    const [newButton, setNewButton] = useState(\"\")\r\n\r\n\r\n\r\n\r\n    //allow the user to logout\r\n    const logoutAndReturn = () => {\r\n        return logout().then(() => {\r\n            toast.dark(\"You are now logged out\");\r\n            history.push(\"/login\");\r\n        });\r\n    };\r\n\r\n    //taking the user to the board form \r\n    const goToBoardForm = () => {\r\n        history.push(\"/BoardForm\");\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Navbar color=\"dark\" dark expand=\"md\">\r\n                <a href=\"/\"><img\r\n                    src={logo}\r\n                    alt=\"logo\"\r\n                    width=\"30\"\r\n                    height=\"30\"\r\n                    className=\"mr-1\"\r\n                />\r\n                </a>\r\n\r\n\r\n\r\n                <Nav className=\"mr-auto logout\" navbar>\r\n\r\n                    <>\r\n\r\n\r\n                        <NavItem >\r\n                            <Button color=\"warning\" onClick={goToBoardForm} >New Board</Button>{' '}\r\n                        </NavItem>\r\n\r\n                        <NavItem className=\"logoutButton\">\r\n                            <Button color=\"warning\" onClick={logoutAndReturn}>Logout</Button>{' '}\r\n                        </NavItem>\r\n                    </>\r\n\r\n                </Nav>\r\n\r\n            </Navbar>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Header;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js",["115","116","117"],"import React, { useContext, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Button, Input } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport \"./Login.css\";\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nconst Login = () => {\r\n    const { login } = useContext(UserProfileContext);\r\n    const [loading, setLoading] = useState(false);\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n        login(email, password)\r\n            .then((user) => {\r\n                setLoading(false);\r\n                toast.info(`Welcome back ${user.name}`);\r\n                history.push(\"/\");\r\n            })\r\n            .catch((err) => {\r\n                setLoading(false);\r\n                toast.error(\"Invalid email or password\");\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div className=\"login-form\">\r\n            <form onSubmit={handleSubmit}>\r\n\r\n                <h2 className=\"text-center\">Login</h2>\r\n                <div className=\"form-group\">\r\n                    <Input\r\n                        onChange={(e) => setEmail(e.target.value)}\r\n                        type=\"email\"\r\n                        className=\"form-control\"\r\n                        name=\"email\"\r\n                        placeholder=\"Email\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Input\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                        type=\"password\"\r\n                        className=\"form-control\"\r\n                        name=\"password\"\r\n                        placeholder=\"Password\"\r\n                        required=\"required\"\r\n                    />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <Button type=\"submit\" block color=\"warning\" disabled={loading}>\r\n                        Sign in\r\n          </Button>\r\n                </div>\r\n                <div className=\"text-center small\">\r\n                    Don't have an account?\r\n          <div>\r\n                        <Link to=\"/register\">Sign up here</Link>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js",["118","119","120","121"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { UserProfileContext } from \"../providers/UserProfileProvider\";\r\nimport BoardList from \"./Board/BoardList\";\r\nimport { Col } from \"reactstrap\"\r\nimport \"./Home.css\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const user = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const { getToken } = useContext(UserProfileContext);\r\n    const [boards, setBoards] = useState([])\r\n\r\n\r\n    //getting the all the boards for this user\r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/board`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((boards) =>\r\n\r\n                setBoards(boards));\r\n\r\n    }, []);\r\n\r\n\r\n    return (\r\n\r\n\r\n\r\n\r\n        <div>\r\n\r\n            < h1 className=\"home\" > Welcome {user.name.split(\" \")[0]} !</h1 >\r\n            <p className=\"home2\">Click on a {\" \"}<strong className=\"tag\">Board</strong>{\" \"}to view tasks</p>\r\n            <Col className=\"listOfBoards\">\r\n                <BoardList boards={boards} />\r\n            </Col>\r\n        </div >\r\n\r\n\r\n\r\n\r\n\r\n    );\r\n}\r\nexport default Home\r\n\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js",["122","123","124","125","126","127","128","129","130","131","132"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js",["133"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js",["134"],"import React, { useState, createContext, useContext } from \"react\";\r\nimport { UserProfileContext } from \"./UserProfileProvider\";\r\n\r\nexport const SubTaskContext = createContext();\r\n\r\nexport function SubTaskProvider(props) {\r\n\r\n    const { getToken } = useContext(UserProfileContext);\r\n    const [subTasks, setSubTasks] = useState([]);\r\n    const [subTask, setSubTask] = useState({});\r\n\r\n\r\n\r\n    //fetch calls\r\n    const getSubTasks = (taskId) => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/subTask/task/${taskId}`, {\r\n                method: \"GET\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                },\r\n            })\r\n                .then((res) => res.json())\r\n                .then((subTasks) => {\r\n                    setSubTasks(subTasks);\r\n                })\r\n        );\r\n    };\r\n\r\n\r\n\r\n    const editSubTask = (subTaskId) => {\r\n        getToken().then((token) => {\r\n            fetch(`/api/subTask/${subTaskId}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(setSubTask)\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <SubTaskContext.Provider value={{ subTasks, getSubTasks, editSubTask }}>\r\n            {props.children}\r\n        </SubTaskContext.Provider>\r\n    );\r\n}","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js",["135"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\n\r\n\r\n\r\nconst BoardEditForm = () => {\r\n    const { getToken } = useContext(UserProfileContext)\r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n    //this is a empty string but when the page initially gets loaded then the string will be updated with the current name of the board\r\n    const [boardToEdit, setBoardToEdit] = useState(\"\")\r\n    //this the existing board object that is gets loads ar initial load too.\r\n    const [existingBoard, setExistingBoard] = useState({})\r\n\r\n    //this is getting the current state of the board base off the id passed in the uri and setting existingBoard and boardToEdit\r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/board/${boardId}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((board) => {\r\n                setExistingBoard(board)\r\n                setBoardToEdit(board[\"name\"])\r\n            });\r\n\r\n    }, []);\r\n\r\n    //updating boardToEdit value. Updates boardToEdit value on every key stroke for the input field\r\n    const handleSubmit = (evt) => {\r\n        const newBoard = evt.target.value;\r\n        setBoardToEdit(newBoard);\r\n    };\r\n\r\n    // update function to update the database with the new state of the board name\r\n    const updateBoard = (board) => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/board/${boardId}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify({\r\n                        //keeping all the existing keys the same except name\r\n                        \"active\": existingBoard[\"active\"],\r\n                        \"id\": existingBoard[\"id\"],\r\n                        \"name\": boardToEdit,\r\n                        \"userProfile\": existingBoard[\"userProfile\"],\r\n                        \"userProfileId\": existingBoard[\"userProfileId\"]\r\n                    }),\r\n                })\r\n            )\r\n            .then((evt) => history.push(\"/\"));\r\n    };\r\n\r\n\r\n    //taking the user back to the home page\r\n    const goBackHome = () => {\r\n        history.push(`/`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Board Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={boardToEdit}\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleSubmit(evt)\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            updateBoard(boardToEdit);\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Button outline color=\"info\" onClick={goBackHome}>\r\n                        Cancel\r\n              </Button>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default BoardEditForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js",["136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152"],"import { useEffect, useState, useContext } from \"react\";\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\nimport { useParams, useHistory, Redirect } from \"react-router-dom\";\r\nimport { Button, Col, ButtonGroup, Form, Input, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\nimport SubTask from \"../SubTask/SubTask\";\r\nimport SubTaskList from \"../SubTask/SubTaskList\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport BoardForm from \"../Board/BoardForm\";\r\n\r\nconst Task = (props) => {\r\n    const { getToken } = useContext(UserProfileContext);\r\n    const { getTasks, tasks } = useContext(TaskContext);\r\n    const { taskId } = useParams();\r\n    const { boardId } = useParams();\r\n    const [board, setBoard] = useState();\r\n    const [task, setTask] = useState({});\r\n    // const [tasks, setTasks] = useState();\r\n    const [cSelected, setCSelected] = useState([]);\r\n    const [rSelected, setRSelected] = useState(null);\r\n    //this is setting the inputBox to false so you won't see any box to edit or delete the notes\r\n    const [showInputBox, setShowInputBox] = useState(false);\r\n    //this is setting the notes to an empty string which will be changed in useEffected \r\n    const [notes, setNotes] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const history = useHistory();\r\n    const [subTasks, setSubTasks] = useState([]);\r\n    const { subTask, setSubTask } = useState();\r\n    const [pendingDelete, setPendingDelete] = useState(false);\r\n    const [isComplete, setIsComplete] = useState();\r\n    const [taskItem, setTaskItem] = useState({})\r\n\r\n\r\n\r\n    //Priority\r\n    const onCheckboxBtnClick = (selected) => {\r\n        const index = cSelected.indexOf(selected);\r\n        if (index < 0) {\r\n            cSelected.push(selected);\r\n        } else {\r\n            cSelected.splice(index, 1);\r\n        }\r\n        setCSelected([...cSelected]);\r\n    }\r\n\r\n    //5.getting the task by id and returning the info in the return section \r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n\r\n                fetch(`/api/task/${taskId}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((task) => {\r\n                setTask(task)\r\n                setNotes(task.notes)\r\n                setName(task.name)\r\n                setRSelected(task.priorityId)\r\n            });\r\n\r\n    }, []);\r\n\r\n\r\n    //is toggling between showing the input box and not showing it when you change the notes, the !showInputBox does the opposite of the setShowInputBox\r\n    const handelInputDisplay = () => {\r\n        setShowInputBox(!showInputBox);\r\n\r\n    }\r\n\r\n    //updating notes value. Updates the notes value on every key stroke for the input field\r\n    const handleSubmit = (evt) => {\r\n        if (evt.target.name === \"notes\") {\r\n            const newNotes = evt.target.value;\r\n            setNotes(newNotes);\r\n        } else if (evt.target.name === \"name\") {\r\n            const newName = evt.target.value;\r\n            setName(newName)\r\n        }\r\n    };\r\n\r\n    //updating task with the changes for notes and name \r\n    const updateTask = () => {\r\n        const newTask = task\r\n        newTask[\"boardId\"] = boardId\r\n        newTask[\"notes\"] = notes\r\n        //  I want you to update the name to the new name I just changed it too.\r\n        newTask[\"name\"] = name\r\n\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/Board/${boardId}/task/${taskId}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify(\r\n                        newTask\r\n                    ),\r\n                })\r\n            )\r\n            .then((evt) => handelInputDisplay());\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    //getting task \r\n    useEffect(() => {\r\n        getTasks(boardId);\r\n    }, []);\r\n\r\n\r\n\r\n    //delete a task\r\n    const savePendingDelete = () => {\r\n        getToken().then((token) =>\r\n            fetch(`/api/task/${taskId}`, {\r\n                method: \"Delete\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n\r\n            }).then(() => {\r\n                setPendingDelete(false);\r\n\r\n            }).then(() => {\r\n                goBackToBoard();\r\n\r\n            })\r\n        );\r\n    };\r\n\r\n\r\n\r\n    //taking the user back to the board they are on \r\n    const goBackToBoard = () => {\r\n        history.push(`/board/${boardId}`);\r\n    }\r\n\r\n\r\n    //1. get the list of subTasks\r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/subTask/task/${taskId}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((subTasks) =>\r\n\r\n                setSubTasks(subTasks));\r\n\r\n    }, []);\r\n    if (!subTasks) {\r\n        return null;\r\n    }\r\n\r\n    //taking the user to the subTask form \r\n    const goToSubTaskForm = () => {\r\n        history.push(`/board/${boardId}/task/${taskId}/SubTaskForm`);\r\n    }\r\n    return (\r\n        <div>\r\n            <Button outline color=\"info\" onClick={goBackToBoard}>\r\n                Go Back To Boards\r\n              </Button>\r\n\r\n\r\n\r\n            <h4>Task:</h4>\r\n            {\r\n                showInputBox ?\r\n\r\n                    <Input\r\n                        id=\"name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        value={name}\r\n                        onChange={(evt) => {\r\n                            evt.preventDefault()\r\n                            handleSubmit(evt)\r\n                        }} />\r\n                    : <h3>{task.name}</h3>\r\n\r\n\r\n            }\r\n\r\n\r\n            <h4>Notes:</h4>\r\n            { showInputBox ?\r\n                <>\r\n                    <Input\r\n                        id=\"notes\"\r\n                        type=\"text\"\r\n                        name=\"notes\"\r\n                        value={notes}\r\n                        onChange={(evt) => {\r\n                            evt.preventDefault()\r\n                            handleSubmit(evt)\r\n                        }} />\r\n\r\n                    <Button color=\"warning\" size=\"sm\" onClick={(evt) => { evt.preventDefault(); updateTask() }}> save </Button>\r\n                </>\r\n                : <div> <p>{task.notes}</p>  <Button color=\"warning\" size=\"sm\" onClick={handelInputDisplay}>Edit</Button></div>}\r\n\r\n\r\n\r\n            <h4>Subtask:</h4>\r\n            <Button onClick={goToSubTaskForm}>New SubTask</Button>\r\n            <Col className=\"listOfSubTasks\">\r\n                <SubTaskList subTasks={subTasks} boardId={task.boardId} />\r\n            </Col>\r\n\r\n            <h5>Priority:</h5>\r\n\r\n            <ButtonGroup>\r\n                <Button color=\"primary\" onClick={() => setRSelected(1)} active={rSelected === 1}>none</Button>\r\n                <Button color=\"primary\" onClick={() => setRSelected(2)} active={rSelected === 2}>low</Button>\r\n                <Button color=\"primary\" onClick={() => setRSelected(3)} active={rSelected === 3}>medium</Button>\r\n                <Button color=\"primary\" onClick={() => setRSelected(4)} active={rSelected === 4}>high</Button>\r\n            </ButtonGroup>\r\n            <p>Selected: {rSelected}</p>\r\n\r\n            <h4>Date Created: {task.dateCreated}</h4>\r\n\r\n\r\n            <Button\r\n                className=\"btn btn-danger\"\r\n                onClick={(e) => setPendingDelete(true)}\r\n            >\r\n                Delete\r\n            </Button>\r\n\r\n\r\n\r\n            {/* DELETE CONFIRM MODAL */}\r\n            <Modal isOpen={pendingDelete}>\r\n                <ModalHeader>Delete {task.name}?</ModalHeader>\r\n                <ModalBody>\r\n                    Are you sure you want to delete this task? This action cannot be\r\n                    undone.\r\n        </ModalBody>\r\n                <ModalFooter>\r\n                    <Button onClick={(e) => setPendingDelete(false)}>No, Cancel</Button>\r\n                    <Button className=\"btn btn-outline-danger\" onClick={savePendingDelete}>Yes, Delete</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Task;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js",["153"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\n\r\nconst TaskForm = () => {\r\n    const [task, setTask] = useState({ name: \"\", note: \"\", isComplete: false, dateTime: \"\" })\r\n    const { getToken } = useContext(UserProfileContext);\r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n\r\n    //getting the boardId \r\n    const createBoardId = () => {\r\n        const newTask = task\r\n        newTask[\"boardId\"] = boardId\r\n        setTask(newTask);\r\n    }\r\n\r\n    //useEffect for createBoardId function \r\n    useEffect(() => {\r\n        createBoardId();\r\n    }, [])\r\n\r\n\r\n    //this is updating the task and setting it as the new task\r\n    //if its a priorityId change to a number otherwise return as a string \r\n    const handleSubmit = (evt) => {\r\n        const newTask = { ...task };\r\n        if (evt.target.name === \"priorityId\") {\r\n            newTask[evt.target.name] = Number(evt.target.value);\r\n        } else {\r\n            newTask[evt.target.name] = evt.target.value;\r\n        }\r\n\r\n        setTask(newTask);\r\n    };\r\n\r\n    //this is creating the new task in the database then taking us back to the board we are currently on \r\n    const createNewTask = () => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/board/${boardId}/task`, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/JSON\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify(task),\r\n                })\r\n            )\r\n            .then(() => history.push(`/board/${boardId}`));\r\n    };\r\n\r\n    //updateTask = task, then setting the date to current day and time, then updating set task to the updated day and time in the database\r\n    const createDate = () => {\r\n        const updateTask = task\r\n        updateTask[\"dateTime\"] = Date.now()\r\n        setTask(updateTask)\r\n    }\r\n\r\n    //taking the user back to the board they are on \r\n    const goBackToBoard = () => {\r\n        history.push(`/board/${boardId}`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Task Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter new task name\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"notes\">Notes</Label>\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                placeholder=\"Enter notes\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"priority\">Choose a Priority</Label>\r\n                            <select onChange={(evt) => handleSubmit(evt)} id=\"priority\" name=\"priorityId\" form=\"priority\">\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n                            </select>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createDate();\r\n                            createNewTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Button outline color=\"info\" onClick={goBackToBoard}>\r\n                        Cancel\r\n              </Button>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\nexport default TaskForm;\r\n\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js",["154","155","156","157","158","159","160"],"import { useEffect, useState, useContext } from \"react\";\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown, Col, Button, Modal, ModalFooter, ModalBody, ModalHeader } from 'reactstrap';\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\n\r\n\r\n\r\nconst SubTask = (props) => {\r\n    const { getToken } = useContext(UserProfileContext);\r\n    const { getSubTasks } = useContext(SubTaskContext)\r\n    const { subTaskId, taskId, boardId } = useParams();\r\n    const [subTask, setSubTask] = useState([])\r\n    const history = useHistory();\r\n    const [pendingDelete, setPendingDelete] = useState(false);\r\n\r\n    //5.getting the subTask by id and returning the info in the return section \r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n\r\n                fetch(`/api/subTask/${subTaskId}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((subTask) => {\r\n                setSubTask(subTask)\r\n\r\n            });\r\n\r\n    }, []);\r\n\r\n    //taking the user back to the task they are on \r\n    const goBackToTask = () => {\r\n        history.push(`/board/${boardId}/task/${taskId}`);\r\n    }\r\n\r\n\r\n\r\n    //getting list of subTask on Task\r\n    useEffect(() => {\r\n        getSubTasks(taskId);\r\n    }, []);\r\n\r\n    const savePendingDelete = () => {\r\n\r\n        getToken().then((token) =>\r\n            fetch(`/api/subTask/${subTaskId}`, {\r\n                method: \"Delete\",\r\n                headers: {\r\n\r\n                    Authorization: `Bearer ${token}`,\r\n                }\r\n\r\n            }).then(() => {\r\n                setPendingDelete(false);\r\n\r\n            }).then(() => {\r\n                goBackToTask();\r\n\r\n            })\r\n        );\r\n    };\r\n\r\n    //2. mounting the subTaskList component then passing subTask into that component next go to subTaskList \r\n    return (\r\n        <div>\r\n            <h3>{subTask.name}</h3>\r\n            <Button outline color=\"info\" onClick={goBackToTask}>\r\n                Go Back To Task\r\n              </Button>\r\n\r\n            <Button\r\n                className=\"btn btn-danger\"\r\n                onClick={(e) => setPendingDelete(true)}\r\n            >\r\n                Delete\r\n            </Button>\r\n\r\n\r\n\r\n            {/* DELETE CONFIRM MODAL */}\r\n            <Modal isOpen={pendingDelete}>\r\n                <ModalHeader>Delete {subTask.name}?</ModalHeader>\r\n                <ModalBody>\r\n                    Are you sure you want to delete this subTask? This action cannot be\r\n                    undone.\r\n        </ModalBody>\r\n                <ModalFooter>\r\n                    <Button onClick={(e) => setPendingDelete(false)}>No, Cancel</Button>\r\n                    <Button className=\"btn btn-outline-danger\" onClick={savePendingDelete}>Yes, Delete</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n}\r\n\r\nexport default SubTask","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js",["161"],"\r\nimport React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\n\r\n\r\nconst SubTaskForm = () => {\r\n    const [subTask, setSubTask] = useState({ name: \"\", isComplete: false });\r\n    const { getToken } = useContext(UserProfileContext);\r\n    const { taskId, boardId } = useParams();\r\n    const history = useHistory();\r\n\r\n    //getting the taskId\r\n    const createTaskId = () => {\r\n        const newSubTask = subTask\r\n        newSubTask[\"taskId\"] = taskId\r\n        newSubTask[\"boardId\"] = boardId\r\n        setSubTask(newSubTask);\r\n\r\n    }\r\n\r\n    //useEffect for createTaskId function \r\n    useEffect(() => {\r\n        createTaskId();\r\n    }, [])\r\n\r\n    //updating the subTask and setting the new subTask\r\n    const handleSubmit = (evt) => {\r\n        const newSubTask = { ...subTask };\r\n        newSubTask[evt.target.name] = evt.target.value;\r\n        setSubTask(newSubTask)\r\n    }\r\n\r\n    //making a new subTask and saving it to the database\r\n    const createNewSubTask = () => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/subTask/task/${taskId}`, {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/JSON\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify(subTask),\r\n                })\r\n            )\r\n            .then(() => history.push(`/board/${boardId}/task/${taskId}`));\r\n\r\n    };\r\n\r\n\r\n    //taking the user back to the task they are on \r\n    const goBackToTask = () => {\r\n        history.push(`/board/${boardId}/task/${taskId}`);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">SubTask Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter a subTask\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createNewSubTask(subTask);\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                </Button>\r\n                    <Button outline color=\"info\" onClick={goBackToTask}>\r\n                        Cancel\r\n              </Button>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\nexport default SubTaskForm;         ","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js",["162","163","164","165","166","167","168","169","170","171"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js",["172","173","174","175","176"],"import React, { useState, useContext } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown, Col, Row } from 'reactstrap';\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\n\r\n\r\n\r\nconst SubTaskList = ({ subTasks }) => {\r\n    const { getToken } = useContext(UserProfileContext)\r\n    const { taskId, boardId } = useParams();\r\n    const [subTask, setSubTask] = useState({});\r\n    const [isComplete, setIsComplete] = useState()\r\n\r\n\r\n\r\n    //checkbox\r\n    const setSubTaskAsComplete = (evt, subTaskId) => {\r\n        if (evt.target.name === \"isComplete\") {\r\n            const newIsComplete = evt.target.value;\r\n            setIsComplete(newIsComplete)\r\n        }\r\n        const newSubTask = { ...subTask }\r\n        newSubTask[\"isComplete\"] = isComplete\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/subTask/${subTaskId}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify(\r\n                        newSubTask\r\n                    ),\r\n                })\r\n            )\r\n        newSubTask[evt.target.name] = subTask.complete ? false : true;\r\n        setSubTask(newSubTask)\r\n    }\r\n\r\n\r\n    //3.mapping through the list of subTasks which will be displayed on the task\r\n    //4. link goes subTask.js to get the subTask by id which display one subTask info\r\n    return (\r\n        <div>\r\n            {subTasks.map((subTask) => (\r\n                <div key={subTask.id} >\r\n\r\n                    <Col>\r\n\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id={`check--${subTask.id}`}\r\n                            name=\"complete\"\r\n                            checked={subTask.complete}\r\n                            onChange={(evt) => {\r\n                                setSubTaskAsComplete(evt, subTask.id);\r\n                            }} />\r\n\r\n\r\n                        <Link to={`/board/${boardId}/task/${taskId}/SubTask/${subTask.id}`}>\r\n                            <strong>{subTask.name}</strong>\r\n                        </Link>\r\n\r\n                    </Col>\r\n                </div>\r\n\r\n\r\n            ))\r\n            }\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default SubTaskList",{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":2,"column":10,"nodeType":"183","messageId":"184","endLine":2,"endColumn":14},{"ruleId":"181","severity":1,"message":"185","line":5,"column":5,"nodeType":"183","messageId":"184","endLine":5,"endColumn":13},{"ruleId":"181","severity":1,"message":"186","line":7,"column":5,"nodeType":"183","messageId":"184","endLine":7,"endColumn":18},{"ruleId":"181","severity":1,"message":"187","line":8,"column":5,"nodeType":"183","messageId":"184","endLine":8,"endColumn":16},{"ruleId":"181","severity":1,"message":"188","line":11,"column":5,"nodeType":"183","messageId":"184","endLine":11,"endColumn":12},{"ruleId":"181","severity":1,"message":"189","line":12,"column":5,"nodeType":"183","messageId":"184","endLine":12,"endColumn":15},{"ruleId":"181","severity":1,"message":"190","line":13,"column":5,"nodeType":"183","messageId":"184","endLine":13,"endColumn":19},{"ruleId":"181","severity":1,"message":"191","line":14,"column":5,"nodeType":"183","messageId":"184","endLine":14,"endColumn":19},{"ruleId":"181","severity":1,"message":"192","line":15,"column":5,"nodeType":"183","messageId":"184","endLine":15,"endColumn":17},{"ruleId":"181","severity":1,"message":"193","line":16,"column":5,"nodeType":"183","messageId":"184","endLine":16,"endColumn":17},{"ruleId":"181","severity":1,"message":"194","line":25,"column":21,"nodeType":"183","messageId":"184","endLine":25,"endColumn":28},{"ruleId":"181","severity":1,"message":"195","line":30,"column":11,"nodeType":"183","messageId":"184","endLine":30,"endColumn":17},{"ruleId":"181","severity":1,"message":"196","line":3,"column":25,"nodeType":"183","messageId":"184","endLine":3,"endColumn":34},{"ruleId":"181","severity":1,"message":"197","line":3,"column":36,"nodeType":"183","messageId":"184","endLine":3,"endColumn":39},{"ruleId":"181","severity":1,"message":"198","line":3,"column":41,"nodeType":"183","messageId":"184","endLine":3,"endColumn":44},{"ruleId":"181","severity":1,"message":"199","line":9,"column":13,"nodeType":"183","messageId":"184","endLine":9,"endColumn":19},{"ruleId":"181","severity":1,"message":"194","line":9,"column":21,"nodeType":"183","messageId":"184","endLine":9,"endColumn":28},{"ruleId":"181","severity":1,"message":"200","line":12,"column":20,"nodeType":"183","messageId":"184","endLine":12,"endColumn":29},{"ruleId":"201","severity":1,"message":"202","line":18,"column":8,"nodeType":"203","endLine":18,"endColumn":10,"suggestions":"204"},{"ruleId":"181","severity":1,"message":"193","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":22},{"ruleId":"181","severity":1,"message":"192","line":4,"column":24,"nodeType":"183","messageId":"184","endLine":4,"endColumn":36},{"ruleId":"181","severity":1,"message":"190","line":4,"column":38,"nodeType":"183","messageId":"184","endLine":4,"endColumn":52},{"ruleId":"181","severity":1,"message":"205","line":4,"column":54,"nodeType":"183","messageId":"184","endLine":4,"endColumn":74},{"ruleId":"181","severity":1,"message":"206","line":7,"column":23,"nodeType":"183","messageId":"184","endLine":7,"endColumn":35},{"ruleId":"181","severity":1,"message":"207","line":11,"column":30,"nodeType":"183","messageId":"184","endLine":11,"endColumn":41},{"ruleId":"181","severity":1,"message":"208","line":12,"column":22,"nodeType":"183","messageId":"184","endLine":12,"endColumn":28},{"ruleId":"181","severity":1,"message":"209","line":16,"column":12,"nodeType":"183","messageId":"184","endLine":16,"endColumn":16},{"ruleId":"181","severity":1,"message":"210","line":16,"column":18,"nodeType":"183","messageId":"184","endLine":16,"endColumn":25},{"ruleId":"201","severity":1,"message":"211","line":36,"column":8,"nodeType":"203","endLine":36,"endColumn":10,"suggestions":"212"},{"ruleId":"201","severity":1,"message":"213","line":43,"column":8,"nodeType":"203","endLine":43,"endColumn":10,"suggestions":"214"},{"ruleId":"181","severity":1,"message":"210","line":16,"column":18,"nodeType":"183","messageId":"184","endLine":16,"endColumn":25},{"ruleId":"181","severity":1,"message":"215","line":10,"column":12,"nodeType":"183","messageId":"184","endLine":10,"endColumn":19},{"ruleId":"201","severity":1,"message":"211","line":42,"column":8,"nodeType":"203","endLine":42,"endColumn":10,"suggestions":"216"},{"ruleId":"181","severity":1,"message":"217","line":3,"column":33,"nodeType":"183","messageId":"184","endLine":3,"endColumn":41},{"ruleId":"181","severity":1,"message":"218","line":4,"column":36,"nodeType":"183","messageId":"184","endLine":4,"endColumn":40},{"ruleId":"181","severity":1,"message":"219","line":5,"column":8,"nodeType":"183","messageId":"184","endLine":5,"endColumn":15},{"ruleId":"181","severity":1,"message":"220","line":8,"column":8,"nodeType":"183","messageId":"184","endLine":8,"endColumn":17},{"ruleId":"181","severity":1,"message":"221","line":12,"column":23,"nodeType":"183","messageId":"184","endLine":12,"endColumn":28},{"ruleId":"181","severity":1,"message":"222","line":15,"column":12,"nodeType":"183","messageId":"184","endLine":15,"endColumn":17},{"ruleId":"181","severity":1,"message":"223","line":15,"column":19,"nodeType":"183","messageId":"184","endLine":15,"endColumn":27},{"ruleId":"181","severity":1,"message":"215","line":27,"column":13,"nodeType":"183","messageId":"184","endLine":27,"endColumn":20},{"ruleId":"181","severity":1,"message":"224","line":27,"column":22,"nodeType":"183","messageId":"184","endLine":27,"endColumn":32},{"ruleId":"181","severity":1,"message":"225","line":29,"column":12,"nodeType":"183","messageId":"184","endLine":29,"endColumn":22},{"ruleId":"181","severity":1,"message":"226","line":29,"column":24,"nodeType":"183","messageId":"184","endLine":29,"endColumn":37},{"ruleId":"181","severity":1,"message":"227","line":30,"column":12,"nodeType":"183","messageId":"184","endLine":30,"endColumn":20},{"ruleId":"181","severity":1,"message":"228","line":30,"column":22,"nodeType":"183","messageId":"184","endLine":30,"endColumn":33},{"ruleId":"181","severity":1,"message":"229","line":35,"column":11,"nodeType":"183","messageId":"184","endLine":35,"endColumn":29},{"ruleId":"201","severity":1,"message":"230","line":65,"column":8,"nodeType":"203","endLine":65,"endColumn":10,"suggestions":"231"},{"ruleId":"201","severity":1,"message":"213","line":116,"column":8,"nodeType":"203","endLine":116,"endColumn":10,"suggestions":"232"},{"ruleId":"201","severity":1,"message":"230","line":165,"column":8,"nodeType":"203","endLine":165,"endColumn":10,"suggestions":"233"},{"ruleId":"201","severity":1,"message":"234","line":30,"column":8,"nodeType":"203","endLine":30,"endColumn":10,"suggestions":"235"},{"ruleId":"181","severity":1,"message":"193","line":4,"column":10,"nodeType":"183","messageId":"184","endLine":4,"endColumn":22},{"ruleId":"181","severity":1,"message":"192","line":4,"column":24,"nodeType":"183","messageId":"184","endLine":4,"endColumn":36},{"ruleId":"181","severity":1,"message":"190","line":4,"column":38,"nodeType":"183","messageId":"184","endLine":4,"endColumn":52},{"ruleId":"181","severity":1,"message":"205","line":4,"column":54,"nodeType":"183","messageId":"184","endLine":4,"endColumn":74},{"ruleId":"181","severity":1,"message":"197","line":4,"column":76,"nodeType":"183","messageId":"184","endLine":4,"endColumn":79},{"ruleId":"201","severity":1,"message":"236","line":35,"column":8,"nodeType":"203","endLine":35,"endColumn":10,"suggestions":"237"},{"ruleId":"201","severity":1,"message":"238","line":47,"column":8,"nodeType":"203","endLine":47,"endColumn":10,"suggestions":"239"},{"ruleId":"201","severity":1,"message":"240","line":34,"column":8,"nodeType":"203","endLine":34,"endColumn":10,"suggestions":"241"},{"ruleId":"181","severity":1,"message":"242","line":1,"column":17,"nodeType":"183","messageId":"184","endLine":1,"endColumn":26},{"ruleId":"181","severity":1,"message":"193","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":22},{"ruleId":"181","severity":1,"message":"192","line":3,"column":24,"nodeType":"183","messageId":"184","endLine":3,"endColumn":36},{"ruleId":"181","severity":1,"message":"190","line":3,"column":38,"nodeType":"183","messageId":"184","endLine":3,"endColumn":52},{"ruleId":"181","severity":1,"message":"205","line":3,"column":54,"nodeType":"183","messageId":"184","endLine":3,"endColumn":74},{"ruleId":"181","severity":1,"message":"198","line":3,"column":81,"nodeType":"183","messageId":"184","endLine":3,"endColumn":84},{"ruleId":"181","severity":1,"message":"243","line":6,"column":8,"nodeType":"183","messageId":"184","endLine":6,"endColumn":12},{"ruleId":"181","severity":1,"message":"244","line":11,"column":13,"nodeType":"183","messageId":"184","endLine":11,"endColumn":21},{"ruleId":"181","severity":1,"message":"210","line":14,"column":18,"nodeType":"183","messageId":"184","endLine":14,"endColumn":25},{"ruleId":"181","severity":1,"message":"245","line":16,"column":11,"nodeType":"183","messageId":"184","endLine":16,"endColumn":18},{"ruleId":"181","severity":1,"message":"193","line":3,"column":10,"nodeType":"183","messageId":"184","endLine":3,"endColumn":22},{"ruleId":"181","severity":1,"message":"192","line":3,"column":24,"nodeType":"183","messageId":"184","endLine":3,"endColumn":36},{"ruleId":"181","severity":1,"message":"190","line":3,"column":38,"nodeType":"183","messageId":"184","endLine":3,"endColumn":52},{"ruleId":"181","severity":1,"message":"205","line":3,"column":54,"nodeType":"183","messageId":"184","endLine":3,"endColumn":74},{"ruleId":"181","severity":1,"message":"198","line":3,"column":81,"nodeType":"183","messageId":"184","endLine":3,"endColumn":84},"no-native-reassign",["246"],"no-negated-in-lhs",["247"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'Collapse' is defined but never used.","'NavbarToggler' is defined but never used.","'NavbarBrand' is defined but never used.","'NavLink' is defined but never used.","'NavbarText' is defined but never used.","'DropdownToggle' is defined but never used.","'ButtonDropdown' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'isAdmin' is assigned a value but never used.","'toggle' is assigned a value but never used.","'Container' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'logout' is assigned a value but never used.","'setBoards' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getBoard'. Either include it or remove the dependency array.","ArrayExpression",["248"],"'UncontrolledDropdown' is defined but never used.","'TaskProvider' is defined but never used.","'getTaskById' is assigned a value but never used.","'taskId' is assigned a value but never used.","'task' is assigned a value but never used.","'setTask' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardId' and 'getToken'. Either include them or remove the dependency array.",["249"],"React Hook useEffect has missing dependencies: 'boardId' and 'getTasks'. Either include them or remove the dependency array.",["250"],"'subTask' is assigned a value but never used.",["251"],"'Redirect' is defined but never used.","'Form' is defined but never used.","'SubTask' is defined but never used.","'BoardForm' is defined but never used.","'tasks' is assigned a value but never used.","'board' is assigned a value but never used.","'setBoard' is assigned a value but never used.","'setSubTask' is assigned a value but never used.","'isComplete' is assigned a value but never used.","'setIsComplete' is assigned a value but never used.","'taskItem' is assigned a value but never used.","'setTaskItem' is assigned a value but never used.","'onCheckboxBtnClick' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getToken' and 'taskId'. Either include them or remove the dependency array.",["252"],["253"],["254"],"React Hook useEffect has a missing dependency: 'createBoardId'. Either include it or remove the dependency array.",["255"],"React Hook useEffect has missing dependencies: 'getToken' and 'subTaskId'. Either include them or remove the dependency array.",["256"],"React Hook useEffect has missing dependencies: 'getSubTasks' and 'taskId'. Either include them or remove the dependency array.",["257"],"React Hook useEffect has a missing dependency: 'createTaskId'. Either include it or remove the dependency array.",["258"],"'useEffect' is defined but never used.","'Task' is defined but never used.","'getToken' is assigned a value but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"261","fix":"265"},{"desc":"266","fix":"267"},{"desc":"263","fix":"268"},{"desc":"266","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},"Update the dependencies array to be: [getBoard]",{"range":"278","text":"279"},"Update the dependencies array to be: [boardId, getToken]",{"range":"280","text":"281"},"Update the dependencies array to be: [boardId, getTasks]",{"range":"282","text":"283"},{"range":"284","text":"281"},"Update the dependencies array to be: [getToken, taskId]",{"range":"285","text":"286"},{"range":"287","text":"283"},{"range":"288","text":"286"},"Update the dependencies array to be: [createBoardId]",{"range":"289","text":"290"},"Update the dependencies array to be: [getToken, subTaskId]",{"range":"291","text":"292"},"Update the dependencies array to be: [getSubTasks, taskId]",{"range":"293","text":"294"},"Update the dependencies array to be: [createTaskId]",{"range":"295","text":"296"},[663,665],"[getBoard]",[1289,1291],"[boardId, getToken]",[1452,1454],"[boardId, getTasks]",[1446,1448],[2556,2558],"[getToken, taskId]",[4133,4135],[5340,5342],[845,847],"[createBoardId]",[1303,1305],"[getToken, subTaskId]",[1569,1571],"[getSubTasks, taskId]",[894,896],"[createTaskId]"]