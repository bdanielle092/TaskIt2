[{"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js":"1","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js":"2","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js":"3","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js":"6","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js":"7","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js":"8","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js":"9","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js":"10","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js":"11","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js":"12","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js":"13","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js":"14","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js":"15","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js":"16","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js":"17","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js":"18","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js":"19","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js":"20","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js":"21","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js":"22","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js":"23","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js":"24","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js":"25"},{"size":716,"mtime":1612459642743,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":897,"mtime":1615233545957,"results":"29","hashOfConfig":"27"},{"size":3417,"mtime":1615261617503,"results":"30","hashOfConfig":"27"},{"size":3624,"mtime":1614482410135,"results":"31","hashOfConfig":"27"},{"size":1589,"mtime":1614888864532,"results":"32","hashOfConfig":"27"},{"size":2536,"mtime":1614482401009,"results":"33","hashOfConfig":"27"},{"size":3800,"mtime":1612459642757,"results":"34","hashOfConfig":"27"},{"size":1649,"mtime":1614888864543,"results":"35","hashOfConfig":"27"},{"size":2699,"mtime":1614976910341,"results":"36","hashOfConfig":"27"},{"size":3366,"mtime":1614888864566,"results":"37","hashOfConfig":"27"},{"size":1367,"mtime":1614977932140,"results":"38","hashOfConfig":"27"},{"size":1759,"mtime":1614976749684,"results":"39","hashOfConfig":"27"},{"size":3835,"mtime":1614888864517,"results":"40","hashOfConfig":"27"},{"size":1250,"mtime":1614888864528,"results":"41","hashOfConfig":"27"},{"size":1883,"mtime":1615061974352,"results":"42","hashOfConfig":"27"},{"size":2128,"mtime":1615261327694,"results":"43","hashOfConfig":"27"},{"size":3874,"mtime":1615232718022,"results":"44","hashOfConfig":"27"},{"size":4373,"mtime":1614976749691,"results":"45","hashOfConfig":"27"},{"size":1381,"mtime":1614979807305,"results":"46","hashOfConfig":"27"},{"size":5773,"mtime":1614999093049,"results":"47","hashOfConfig":"27"},{"size":3919,"mtime":1615259156016,"results":"48","hashOfConfig":"27"},{"size":2944,"mtime":1615261923011,"results":"49","hashOfConfig":"27"},{"size":799,"mtime":1615250161916,"results":"50","hashOfConfig":"27"},{"size":1177,"mtime":1615249605467,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"v3c2y3",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":1,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js",[],["112","113"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js",["114"],"import React, { useContext, useEffect } from 'react';\r\nimport { BoardContext } from '../providers/BoardProvider';\r\nimport BoardList from \"./Board/BoardList\";\r\nimport { Col } from \"reactstrap\"\r\nimport \"./Home.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const user = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const { getAllBoards, boards } = useContext(BoardContext);\r\n    const history = useHistory();\r\n\r\n\r\n    //useEffect is automatically invoked and since the dependency array is empty, it only runs the first time the component renders.You can include dependencies in the array to cause the useEffect to run additional times.\r\n    useEffect(() => {\r\n\r\n        getAllBoards();\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    const goToBoardForm = () => {\r\n        history.push(\"/BoardForm\");\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <div>\r\n                <div className='icons'>\r\n                    <AiOutlinePlusCircle\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        onClick={goToBoardForm}\r\n                        className='plus-icon' />\r\n                </div>\r\n\r\n                <h1 className=\"home\">Welcome {user.name.split(\" \")[0]}!</h1>\r\n                <p className=\"home2\">Click on a  <strong className=\"tag\">Board</strong> to view tasks</p>\r\n                <Col className=\"listOfBoards\">\r\n                    <BoardList boards={boards} />\r\n                </Col>\r\n\r\n\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Home\r\n\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js",["115","116"],"import React, { useEffect, useContext } from \"react\";\r\nimport { Card, CardBody, Col } from \"reactstrap\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport TaskList from \"../Task/TaskList\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n\r\nconst Board = ({ props }) => {\r\n    const { getBoardById, board } = useContext(BoardContext)\r\n    const { boardId } = useParams();\r\n    const { getTasks, tasks } = useContext(TaskContext);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getBoardById(boardId)\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        getTasks(boardId);\r\n\r\n    }, [])\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <Card>\r\n            <CardBody>\r\n                <div className='icons'>\r\n                    <Link to={\"/\"}>\r\n                        <TiArrowBack\r\n                            size=\"2em\"\r\n                            color=\"#2A9d8F\"\r\n                            boardId={board}\r\n                            className='back-icon' />\r\n                    </Link>\r\n                </div>\r\n\r\n                <h3 className=\"BoardName\">{board.name} Board</h3>\r\n\r\n                <Col className=\"listOfTasks\">\r\n                    <TaskList tasks={tasks} />\r\n                </Col>\r\n\r\n            </CardBody>\r\n        </Card>\r\n\r\n\r\n    )\r\n}\r\nexport default Board","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js",["117"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\n\r\n\r\n\r\nconst BoardEditForm = () => {\r\n    const { getBoardById, updateBoard, board } = useContext(BoardContext)\r\n\r\n    //for edit, hold on to state of board in this view\r\n    const [editBoard, setEditBoard] = useState({\r\n        id: board.id,\r\n        name: \"\",\r\n        userProfileId: board.userProfileId,\r\n        active: board.active\r\n\r\n    });\r\n    //UseParams pulls in the id information from applications view \r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n    // console.log(parseInt(id).toString())\r\n\r\n    useEffect(() => {\r\n        getBoardById(boardId)\r\n\r\n    }, [])\r\n\r\n    //sets the board at the start\r\n    useEffect(() => {\r\n        setEditBoard(board)\r\n    }, [board]);\r\n\r\n\r\n    //updating boardToEdit value. Updates boardToEdit value on every key stroke for the input field\r\n    const handleFieldChange = (evt) => {\r\n        const newBoard = { ...editBoard };\r\n        newBoard[evt.target.id] = evt.target.value;\r\n        setEditBoard(newBoard);\r\n    };\r\n\r\n    // update function to update the database with the new state of the board name\r\n    const editABoard = (event) => {\r\n        event.preventDefault()\r\n        updateBoard({\r\n            id: editBoard.id,\r\n            name: editBoard.name,\r\n            userProfileId: editBoard.userProfileId,\r\n            active: editBoard.active\r\n\r\n        })\r\n        history.push(\"/\");\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input\r\n                                id={editBoard.id}\r\n                                onChange={handleFieldChange}\r\n                                type=\"hidden\"\r\n                                value={editBoard.id}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Board Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={editBoard.name}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n                        <Input\r\n                            id={editBoard.userProfileId}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editBoard.userProfileId}\r\n                        />\r\n                        <Input\r\n                            id={editBoard.active}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editBoard.active}\r\n                        />\r\n                        <FormGroup>\r\n\r\n                        </FormGroup>\r\n\r\n\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={editABoard}\r\n\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default BoardEditForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js",["118"],"import React, { useEffect, useContext } from \"react\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n\r\nexport default function DeleteBoard() {\r\n    const { board, deleteBoard, getBoardById } = useContext(BoardContext);\r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getBoardById((boardId))\r\n    }, [])\r\n\r\n    const deleteThisBoard = () => {\r\n        deleteBoard(boardId)\r\n        history.push(\"/\")\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {board.name} board ?</h3>\r\n                <h5>This can not be undone and all Tasks on this board will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisBoard}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js",["119","120"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\nconst TaskList = ({ tasks }) => {\r\n    const { getBoardById } = useContext(BoardContext);\r\n    const { getTaskById } = useContext(TaskContext);\r\n    const { boardId, taskId } = useParams();\r\n\r\n\r\n    useEffect(() => {\r\n        getBoardById(boardId)\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, [])\r\n\r\n    //mapping through the list of tasks\r\n    return (\r\n        <div>\r\n            {tasks.map((task) => (\r\n                <div key={task.id} >\r\n                    <Link to={`/board/${task.boardId}/task/${task.id}`}>\r\n                        <strong>{task.name}</strong>\r\n                    </Link>\r\n\r\n                    <div className='icons'>\r\n                        <Link to={`/board/${boardId}/TaskEditForm/${taskId}`}>\r\n                            <FiEdit\r\n                                size=\"2em\"\r\n                                color=\"#2A9d8F\"\r\n                                taskId={task}\r\n                                className='edit-icon' />\r\n                        </Link>\r\n                    </div>\r\n\r\n                    <div className='icons'>\r\n                        <Link to={`/DeleteTask/${task.id}`}>\r\n                            <RiDeleteBin5Line\r\n                                size=\"2em\"\r\n                                color=\"#2A9d8F\"\r\n                                className='delete-icon' />\r\n                        </Link>\r\n                    </div>\r\n\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default TaskList","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js",["121","122","123","124","125"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { Col } from \"reactstrap\";\r\nimport SubTaskList from \"../SubTask/SubTaskList\"\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\n\r\nconst Task = ({ props }) => {\r\n    const { getTaskById, task, getTasks, tasks } = useContext(TaskContext)\r\n    const { board } = useContext(BoardContext)\r\n    const { subTask, subTasks } = useContext(SubTaskContext)\r\n    const { taskId, boardId } = useParams();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        getTasks(boardId)\r\n\r\n    }, [])\r\n\r\n    //taking the user to the board form \r\n    const goToSubTaskForm = () => {\r\n        history.push(`/Board/${boardId}/task/${taskId}/SubTaskForm`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div className='icons'>\r\n                <Link to={`/board/${board.id}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        taskId={task}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3 className=\"TaskName\">{task.name} Task</h3>\r\n            <h3>Notes</h3>\r\n            <p>{task.notes}</p>\r\n            <h3>SubTask</h3>\r\n            <div className='icons'>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToSubTaskForm}\r\n                    className='plus-icon' />\r\n            </div>\r\n            <Col className=\"listOfTasks\">\r\n                <SubTaskList subTasks={subTasks} />\r\n            </Col>\r\n            <h3>Priority</h3>\r\n            <p>{task.priorityId}</p>\r\n\r\n\r\n\r\n            <h3>Date Created: {task.dateCreated}</h3>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Task","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js",["126"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n\r\nconst TaskForm = () => {\r\n    const { addTask } = useContext(TaskContext)\r\n    const { board } = useContext(BoardContext)\r\n    const [task, setTask] = useState({ name: \"\", note: \"\", priorityId: 1, isComplete: false, dateTime: \"\" })\r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n\r\n\r\n    //getting the boardId \r\n    const createBoardId = () => {\r\n        const newTask = task\r\n        newTask[\"boardId\"] = boardId\r\n        setTask(newTask);\r\n    }\r\n\r\n    //useEffect for createBoardId function \r\n    useEffect(() => {\r\n        createBoardId();\r\n    }, [])\r\n\r\n\r\n    //this is updating the task and setting it as the new task and parsing the priority\r\n    //The parseInt function converts its first argument to a string, parses that string, then returns an integer or NaN\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault()\r\n        const newTask = { ...task };\r\n        newTask[evt.target.id] = evt.target.value;\r\n        newTask.priorityId = parseInt(newTask.priorityId)\r\n        setTask(newTask);\r\n\r\n    }\r\n    //this is creating the new task in the database then taking us back to the board we are currently on \r\n    const createNewTask = (evt) => {\r\n        if (task.name === \"\") {\r\n            alert(\"Please enter a Task Name\")\r\n        } else {\r\n            addTask(boardId, task)\r\n            history.push(`/board/${boardId}`);\r\n        }\r\n    };\r\n\r\n    //updateTaskDate = task, then setting the date to current day and time, then updating set task to the updated day and time in the database\r\n    const createDate = () => {\r\n        const updateTaskDate = task\r\n        updateTaskDate[\"dateTime\"] = Date.now()\r\n        setTask(updateTaskDate)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Task Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter new task name\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"notes\">Notes</Label>\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                placeholder=\"Enter notes\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"priority\">Choose a Priority</Label>\r\n                            <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                id=\"priorityId\"\r\n                                value={task.priorityId}\r\n                                onChange={(evt) => handleSubmit(evt)}>\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n\r\n                            </select>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning\"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createDate();\r\n                            createNewTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\nexport default TaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js",["127"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n\r\nexport default function DeleteTask() {\r\n    const { task, deleteTask, getTaskById } = useContext(TaskContext);\r\n    const { board } = useContext(BoardContext);\r\n    const { taskId } = useParams();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getTaskById((taskId))\r\n    }, [])\r\n\r\n    const deleteThisTask = () => {\r\n        deleteTask(taskId)\r\n        history.push(`/board/${board.id}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {task.name} Task ?</h3>\r\n                <h5>This can not be undone and all SubTask on this Task will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisTask}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js",["128"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n\r\n\r\nconst TaskEditForm = () => {\r\n    const { getTaskById, updateTask, task } = useContext(TaskContext)\r\n    const { board } = useContext(BoardContext)\r\n\r\n    //for edit, hold on to state of task in this view\r\n    const [editTask, setEditTask] = useState({\r\n        id: task.id,\r\n        name: \"\",\r\n        notes: \"\",\r\n        priorityId: \"\",\r\n        isComplete: task.isComplete,\r\n        dateCreated: task.dateCreated,\r\n        boardId: task.boardId,\r\n        active: task.active\r\n\r\n    });\r\n    //UseParams pulls in the id information from applications view \r\n    const { taskId } = useParams();\r\n    const history = useHistory();\r\n\r\n\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, [])\r\n\r\n    //sets the task at the start\r\n    useEffect(() => {\r\n        setEditTask(task)\r\n    }, [task]);\r\n\r\n\r\n    //updating boardToEdit value. Updates boardToEdit value on every key stroke for the input field\r\n    const handleFieldChange = (evt) => {\r\n        const newTask = { ...editTask };\r\n        newTask[evt.target.id] = evt.target.value;\r\n        setEditTask(newTask);\r\n    };\r\n\r\n    // update function to update the database with the new state of the board name\r\n    const editATask = (event) => {\r\n        event.preventDefault()\r\n        updateTask({\r\n            id: editTask.id,\r\n            name: editTask.name,\r\n            notes: editTask.notes,\r\n            priorityId: editTask.priorityId,\r\n            isComplete: editTask.isComplete,\r\n            dateCreated: editTask.dateCreated,\r\n            boardId: editTask.boardId,\r\n            active: editTask.active\r\n\r\n        })\r\n        history.push(`/board/${board.id}`);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input\r\n                                id={editTask.id}\r\n                                onChange={handleFieldChange}\r\n                                type=\"hidden\"\r\n                                value={editTask.id}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Board Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={editTask.name}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                value={editTask.notes}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                            <Label for=\"priority\">Priority</Label>\r\n                            <select\r\n\r\n                                id=\"priorityId\"\r\n                                value={editTask.priorityId}\r\n                                onChange={(evt) => handleFieldChange(evt)}>\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n\r\n                            </select>\r\n\r\n                        </FormGroup>\r\n                        <Input\r\n                            id={editTask.isComplete}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.isComplete}\r\n                        />\r\n                        <Input\r\n                            id={editTask.dateCreated}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.dateCreated}\r\n                        />\r\n                        <Input\r\n                            id={editTask.boardId}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.boardId}\r\n                        />\r\n                        <Input\r\n                            id={editTask.active}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.active}\r\n                        />\r\n                        <FormGroup>\r\n\r\n                        </FormGroup>\r\n\r\n\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={editATask}\r\n\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default TaskEditForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js",["129"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js",["130"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js",["131","132"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js",["133","134","135"],{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","severity":1,"message":"141","line":22,"column":8,"nodeType":"142","endLine":22,"endColumn":10,"suggestions":"143"},{"ruleId":"140","severity":1,"message":"144","line":22,"column":8,"nodeType":"142","endLine":22,"endColumn":10,"suggestions":"145"},{"ruleId":"140","severity":1,"message":"146","line":28,"column":8,"nodeType":"142","endLine":28,"endColumn":10,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"144","line":35,"column":8,"nodeType":"142","endLine":35,"endColumn":10,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"144","line":15,"column":8,"nodeType":"142","endLine":15,"endColumn":10,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"144","line":18,"column":8,"nodeType":"142","endLine":18,"endColumn":10,"suggestions":"150"},{"ruleId":"140","severity":1,"message":"151","line":23,"column":8,"nodeType":"142","endLine":23,"endColumn":10,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":15,"column":42,"nodeType":"155","messageId":"156","endLine":15,"endColumn":47},{"ruleId":"153","severity":1,"message":"157","line":17,"column":13,"nodeType":"155","messageId":"156","endLine":17,"endColumn":20},{"ruleId":"140","severity":1,"message":"151","line":25,"column":8,"nodeType":"142","endLine":25,"endColumn":10,"suggestions":"158"},{"ruleId":"140","severity":1,"message":"146","line":30,"column":8,"nodeType":"142","endLine":30,"endColumn":10,"suggestions":"159"},{"ruleId":"160","severity":2,"message":"161","line":34,"column":9,"nodeType":"155","messageId":"162","endLine":34,"endColumn":16},{"ruleId":"140","severity":1,"message":"163","line":34,"column":8,"nodeType":"142","endLine":34,"endColumn":10,"suggestions":"164"},{"ruleId":"140","severity":1,"message":"151","line":17,"column":8,"nodeType":"142","endLine":17,"endColumn":10,"suggestions":"165"},{"ruleId":"140","severity":1,"message":"151","line":41,"column":8,"nodeType":"142","endLine":41,"endColumn":10,"suggestions":"166"},{"ruleId":"153","severity":1,"message":"167","line":1,"column":54,"nodeType":"155","messageId":"156","endLine":1,"endColumn":63},{"ruleId":null,"fatal":true,"severity":2,"message":"168","line":23,"column":13},{"ruleId":"153","severity":1,"message":"169","line":2,"column":21,"nodeType":"155","messageId":"156","endLine":2,"endColumn":25},{"ruleId":"140","severity":1,"message":"170","line":18,"column":8,"nodeType":"142","endLine":18,"endColumn":10,"suggestions":"171"},{"ruleId":"140","severity":1,"message":"144","line":17,"column":8,"nodeType":"142","endLine":17,"endColumn":10,"suggestions":"172"},{"ruleId":"140","severity":1,"message":"151","line":22,"column":8,"nodeType":"142","endLine":22,"endColumn":10,"suggestions":"173"},{"ruleId":"140","severity":1,"message":"170","line":27,"column":8,"nodeType":"142","endLine":27,"endColumn":10,"suggestions":"174"},"no-native-reassign",["175"],"no-negated-in-lhs",["176"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllBoards'. Either include it or remove the dependency array.","ArrayExpression",["177"],"React Hook useEffect has missing dependencies: 'boardId' and 'getBoardById'. Either include them or remove the dependency array.",["178"],"React Hook useEffect has missing dependencies: 'boardId' and 'getTasks'. Either include them or remove the dependency array.",["179"],["180"],["181"],["182"],"React Hook useEffect has missing dependencies: 'getTaskById' and 'taskId'. Either include them or remove the dependency array.",["183"],"no-unused-vars","'tasks' is assigned a value but never used.","Identifier","unusedVar","'subTask' is assigned a value but never used.",["184"],["185"],"no-restricted-globals","Unexpected use of 'history'.","defaultMessage","React Hook useEffect has a missing dependency: 'createBoardId'. Either include it or remove the dependency array.",["186"],["187"],["188"],"'useEffect' is defined but never used.","Parsing error: Identifier 'addSubTask' has already been declared\n\n\u001b[0m \u001b[90m 21 | \u001b[39m    \u001b[36mconst\u001b[39m { board } \u001b[33m=\u001b[39m useContext(\u001b[33mBoardContext\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 22 | \u001b[39m    \u001b[36mconst\u001b[39m [subTask\u001b[33m,\u001b[39m setSubTask] \u001b[33m=\u001b[39m useState({ name\u001b[33m:\u001b[39m \u001b[32m\"\"\u001b[39m\u001b[33m,\u001b[39m isComplete\u001b[33m:\u001b[39m \u001b[36mfalse\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m\u001b[31m\u001b[1m>\u001b[22m\u001b[39m\u001b[90m 23 | \u001b[39m    \u001b[36mconst\u001b[39m { addSubTask } \u001b[33m=\u001b[39m useContext(\u001b[33mSubTaskContext\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m    | \u001b[39m            \u001b[31m\u001b[1m^\u001b[22m\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 24 | \u001b[39m    \u001b[36mconst\u001b[39m { taskId\u001b[33m,\u001b[39m boardId } \u001b[33m=\u001b[39m useParams()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 25 | \u001b[39m    \u001b[36mconst\u001b[39m history \u001b[33m=\u001b[39m useHistory()\u001b[33m;\u001b[39m\u001b[0m\n\u001b[0m \u001b[90m 26 | \u001b[39m\u001b[0m","'Link' is defined but never used.","React Hook useEffect has missing dependencies: 'getSubTaskById' and 'subTaskId'. Either include them or remove the dependency array.",["189"],["190"],["191"],["192"],"no-global-assign","no-unsafe-negation",{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"195","fix":"199"},{"desc":"195","fix":"200"},{"desc":"195","fix":"201"},{"desc":"202","fix":"203"},{"desc":"202","fix":"204"},{"desc":"197","fix":"205"},{"desc":"206","fix":"207"},{"desc":"202","fix":"208"},{"desc":"202","fix":"209"},{"desc":"210","fix":"211"},{"desc":"195","fix":"212"},{"desc":"202","fix":"213"},{"desc":"210","fix":"214"},"Update the dependencies array to be: [getAllBoards]",{"range":"215","text":"216"},"Update the dependencies array to be: [boardId, getBoardById]",{"range":"217","text":"218"},"Update the dependencies array to be: [boardId, getTasks]",{"range":"219","text":"220"},{"range":"221","text":"218"},{"range":"222","text":"218"},{"range":"223","text":"218"},"Update the dependencies array to be: [getTaskById, taskId]",{"range":"224","text":"225"},{"range":"226","text":"225"},{"range":"227","text":"220"},"Update the dependencies array to be: [createBoardId]",{"range":"228","text":"229"},{"range":"230","text":"225"},{"range":"231","text":"225"},"Update the dependencies array to be: [getSubTaskById, subTaskId]",{"range":"232","text":"233"},{"range":"234","text":"218"},{"range":"235","text":"225"},{"range":"236","text":"233"},[798,800],"[getAllBoards]",[721,723],"[boardId, getBoardById]",[790,792],"[boardId, getTasks]",[915,917],[481,483],[622,624],[690,692],"[getTaskById, taskId]",[827,829],[893,895],[958,960],"[createBoardId]",[583,585],[1078,1080],[632,634],"[getSubTaskById, subTaskId]",[636,638],[704,706],[778,780]]