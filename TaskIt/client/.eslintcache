[{"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js":"1","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js":"2","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js":"3","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js":"6","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js":"7","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js":"8","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js":"9","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js":"10","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js":"11","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js":"12","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js":"13","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js":"14","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js":"15","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js":"16","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js":"17","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js":"18","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js":"19","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js":"20","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js":"21","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js":"22","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js":"23","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js":"24","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js":"25","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\DeleteSubTask.js":"26","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskEditForm.js":"27"},{"size":716,"mtime":1612459642743,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"29"},{"size":897,"mtime":1615912793390,"results":"31","hashOfConfig":"29"},{"size":3884,"mtime":1615951962558,"results":"32","hashOfConfig":"29"},{"size":3624,"mtime":1614482410135,"results":"33","hashOfConfig":"29"},{"size":1589,"mtime":1614888864532,"results":"34","hashOfConfig":"29"},{"size":2536,"mtime":1614482401009,"results":"35","hashOfConfig":"29"},{"size":3800,"mtime":1612459642757,"results":"36","hashOfConfig":"29"},{"size":1604,"mtime":1615912793420,"results":"37","hashOfConfig":"29"},{"size":3626,"mtime":1615409665158,"results":"38","hashOfConfig":"29"},{"size":4460,"mtime":1615997300379,"results":"39","hashOfConfig":"29"},{"size":2638,"mtime":1615409665162,"results":"40","hashOfConfig":"29"},{"size":3228,"mtime":1615920762447,"results":"41","hashOfConfig":"29"},{"size":4782,"mtime":1615912793409,"results":"42","hashOfConfig":"29"},{"size":2081,"mtime":1615948261444,"results":"43","hashOfConfig":"29"},{"size":2453,"mtime":1616002025342,"results":"44","hashOfConfig":"29"},{"size":3128,"mtime":1615922462632,"results":"45","hashOfConfig":"29"},{"size":3996,"mtime":1615912793550,"results":"46","hashOfConfig":"29"},{"size":5848,"mtime":1615923976534,"results":"47","hashOfConfig":"29"},{"size":1381,"mtime":1615950214453,"results":"48","hashOfConfig":"29"},{"size":7084,"mtime":1615912793492,"results":"49","hashOfConfig":"29"},{"size":3934,"mtime":1616000120758,"results":"50","hashOfConfig":"29"},{"size":1393,"mtime":1615920170617,"results":"51","hashOfConfig":"29"},{"size":2362,"mtime":1615951819236,"results":"52","hashOfConfig":"29"},{"size":2887,"mtime":1615924267132,"results":"53","hashOfConfig":"29"},{"size":1506,"mtime":1615950240540,"results":"54","hashOfConfig":"29"},{"size":4562,"mtime":1615952636530,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"v3c2y3",{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"58"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"58"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"58"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"58"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"58"},"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js",[],["124","125"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js",["126"],"import React, { useContext, useEffect } from 'react';\r\nimport { BoardContext } from '../providers/BoardProvider';\r\nimport BoardList from \"./Board/BoardList\";\r\nimport { Col, Row, Container } from \"reactstrap\"\r\nimport \"./Home.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\nconst Home = () => {\r\n    const user = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    const { getAllBoards, boards } = useContext(BoardContext);\r\n    const history = useHistory();\r\n\r\n\r\n    //useEffect is automatically invoked and since the dependency array is empty, it only runs the first time the component renders.You can include dependencies in the array to cause the useEffect to run additional times.\r\n    useEffect(() => {\r\n\r\n        getAllBoards();\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    const goToBoardForm = () => {\r\n        history.push(\"/BoardForm\");\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n\r\n            <h1 className=\"home\">Welcome {user.name.split(\" \")[0]}!</h1>\r\n            <p className=\"home2\">Click on a Board to view tasks</p>\r\n            <div className='homeIconContainer'>\r\n                <p className=\"AddBoardName\">Add Board</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToBoardForm}\r\n                    className='home-plus-icon' />\r\n            </div>\r\n            <Col className=\"listOfBoards\">\r\n\r\n                <BoardList boards={boards} />\r\n            </Col>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Home\r\n\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js",["127"],"import React, { useEffect, useContext } from \"react\";\r\nimport { Col } from \"reactstrap\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport TaskList from \"../Task/TaskList\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport \"./Board.css\"\r\n\r\n//this whole thing is a method and we are passing the properties. Then we are exporting it at the end so we can use in in other components \r\nconst Board = ({ props }) => {\r\n    //bringing in the methods from BoardProvider with useContext\r\n    //we bringing in board object to get the properties of a board \r\n    const { board } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from application view\r\n    const { boardId } = useParams();\r\n    //bringing in methods from TaskProvider using TaskContext \r\n    //we bringing tasks to get the properties of the tasks \r\n    const { getTasks, tasks } = useContext(TaskContext);\r\n    //useHistory allows you undo or redo things in your app.\r\n    //an example in this page is we can go back to pervious page if we decide we don't want to be on the board card. \r\n    const history = useHistory();\r\n\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //example is in the component it will come back an get the boardById and get the Task\r\n    // useEffect(() => {\r\n    //     getBoardById(boardId)\r\n\r\n    // }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        getTasks(boardId);\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    // we use history.push to take the user to the add task form \r\n    const goToTaskForm = () => {\r\n        history.push(`/Board/${boardId}/TaskForm`);\r\n    }\r\n    //In this return 1. we have a back arrow icon which takes the use back to the previous page\r\n    //2. We display the name of the board we are on \r\n    //3. we have an add icon which take the user to the add task form \r\n    //4. We display the list of tasks on this board\r\n    //last we export the board so we can import it in other components\r\n    return (\r\n        <div>\r\n            <div className='icons'>\r\n                <Link to={\"/\"}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        board={board}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n\r\n            <h3 className=\"BoardName\">{board.name} Board</h3>\r\n            <div className='BoardContainer'>\r\n                <p className=\"AddTaskName\">Add Task</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToTaskForm}\r\n                    className='task-plus-icon' />\r\n            </div>\r\n\r\n\r\n            <Col className=\"listOfTasks\">\r\n                <TaskList tasks={tasks} />\r\n            </Col>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Board","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js",["128","129"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\n\r\n\r\n//defining the BoardEditFrom method and not passing anything\r\nconst BoardEditForm = () => {\r\n    //bringing in these methods from BoardContext by using useContext\r\n    const { getBoardById, updateBoard, board } = useContext(BoardContext)\r\n\r\n    //editBoard hold on to state of board in this view. The only thing we are changing is the name which is why its an empty string\r\n    //setEditBoard will allow us to update the board\r\n    const [editBoard, setEditBoard] = useState({\r\n        id: board.id,\r\n        name: \"\",\r\n        userProfileId: board.userProfileId,\r\n        active: board.active\r\n\r\n    });\r\n    //UseParams pulls in the id information from applications view \r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n\r\n    //useEffects will come back to these methods after render\r\n    //so after the render it will come back and get the boardId and setEditBoard\r\n    useEffect(() => {\r\n        getBoardById(boardId)\r\n\r\n    }, [])\r\n\r\n    //sets the board at the start\r\n    useEffect(() => {\r\n        setEditBoard(board)\r\n    }, [board]);\r\n\r\n\r\n    //updating board value. Updates board value on every key stroke for the input field\r\n    const handleFieldChange = (evt) => {\r\n        //making a copy of editBoard and calling newBoard\r\n        const newBoard = { ...editBoard };\r\n        //the newBoard id equal the value\r\n        newBoard[evt.target.id] = evt.target.value;\r\n        //update the newBoard\r\n        setEditBoard(newBoard);\r\n    };\r\n\r\n    // update function to update the database with the new state of the board name\r\n    const editABoard = (event) => {\r\n        //this stops the user from pushing the button multiple times\r\n        event.preventDefault()\r\n        //update method key/value \r\n        updateBoard({\r\n            id: editBoard.id,\r\n            name: editBoard.name,\r\n            userProfileId: editBoard.userProfileId,\r\n            active: editBoard.active\r\n\r\n        })\r\n        //history.push takes the user back to the home page\r\n        history.push(\"/\");\r\n    };\r\n\r\n    //return 1.I have input fields for each property for board but I am only updating the board name. The other inputs are hidden\r\n    //2. submit button with an onclick that passing the editABoard method then submit. \r\n    //3. cancel button that take the user back home. I use the Link to go back home\r\n    //then we export the EditBoardForm so we can use it in other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input\r\n                                id={editBoard.id}\r\n                                onChange={handleFieldChange}\r\n                                type=\"hidden\"\r\n                                value={editBoard.id}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Board Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={editBoard.name}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n                        <Input\r\n                            id={editBoard.userProfileId}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editBoard.userProfileId}\r\n                        />\r\n                        <Input\r\n                            id={editBoard.active}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editBoard.active}\r\n                        />\r\n                        <FormGroup>\r\n\r\n                        </FormGroup>\r\n\r\n\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={editABoard}\r\n\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default BoardEditForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js",["130"],"import React, { useEffect, useContext } from \"react\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n//defining and exporting the DeleteBoardForm\r\nexport default function DeleteBoard() {\r\n    //bringing in the methods from BoardContext using useContext\r\n    const { board, deleteBoard, getBoardById } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from ApplicationView\r\n    const { boardId } = useParams();\r\n    //useHistory will allow us to undo/redo and change or navigate to other pages\r\n    //ex. I use history to take the user back home after deleting a board\r\n    const history = useHistory();\r\n\r\n    //useEffect will render then come back and get the boardId\r\n    useEffect(() => {\r\n        getBoardById((boardId))\r\n    }, [])\r\n\r\n    //deleteThisBoard function. We delete the board and push it back home.\r\n    const deleteThisBoard = () => {\r\n        deleteBoard(boardId)\r\n        history.push(\"/\")\r\n    }\r\n\r\n    //return 1. Ask the user if they are user they want to delete\r\n    //2. letting them know this can not be undone\r\n    //3. button to delete the board. onClick that calls the deleteThisBoard function.\r\n    //4. cancel button that takes the user back home. I used the Link to go back home\r\n    //export the DeleteBoard so we can use it in other components\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {board.name} board ?</h3>\r\n                <h5>This can not be undone and all Tasks on this board will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisBoard}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js",["131"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js",["132"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport SubTaskList from \"../SubTask/SubTaskList\";\r\nimport { Col } from \"reactstrap\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\n//defining Task function passing the properties of task object\r\nconst Task = ({ props }) => {\r\n    //bringing the methods from TaskContext by  using useContext\r\n    const { getTaskById, task } = useContext(TaskContext)\r\n    //bring in the board object from BoardContext using useContext\r\n    const { board } = useContext(BoardContext)\r\n    //using useParams to get the taskId from application views\r\n    const { taskId, boardId } = useParams();\r\n    const { getSubTasks, subTasks } = useContext(SubTaskContext)\r\n    const history = useHistory();\r\n\r\n\r\n\r\n    //useEffects render then come back to get the taskId \r\n    //getTaskById is getting the task info for a single task \r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n        getSubTasks(taskId)\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    // we use history.push to take the user to the add task form \r\n    const goToSubTaskForm = () => {\r\n        history.push(`/Board/${boardId}/task/${taskId}/SubTaskForm`);\r\n    }\r\n\r\n\r\n    //return 1.back arrow icon to take the user back to the board they were on. I used the Link to go back to the board page\r\n    //2. Name Of task header\r\n    //3.Notes header\r\n    //4. paragraph tag to display the notes\r\n    //5.Name of subTask header\r\n    //6. list of subTask\r\n    //7. Priority header\r\n    //8. number of the priority the user pick\r\n    //9. date created header and dated created info \r\n    //export the Task so it can be used in other component\r\n    return (\r\n        <div>\r\n\r\n            <div className='icons'>\r\n                <Link to={`/board/${board.id}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        task={task}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3 className=\"TaskName\">{task.name} Task</h3>\r\n            <h3>Notes</h3>\r\n            <p>{task.notes}</p>\r\n            <h3>SubTask</h3>\r\n            <div className='BoardContainer'>\r\n                <p className=\"AddSubTaskName\">Add SubTask</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToSubTaskForm}\r\n                    className='subTask-plus-icon' />\r\n            </div>\r\n            <Col className=\"listOfSubTasks\">\r\n                <SubTaskList subTasks={subTasks} />\r\n            </Col>\r\n            <h3>Priority</h3>\r\n            <p>{task.priorityId}</p>\r\n\r\n\r\n\r\n            <h3>Date Created: {task.dateCreated}</h3>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Task","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js",["133"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n//defining the taskForm and not passing anything\r\nconst TaskForm = () => {\r\n    //brining in the add function from TaskContext using useContext\r\n    const { addTask } = useContext(TaskContext)\r\n    //we bringing in board object to get the properties of a board \r\n    const { board } = useContext(BoardContext)\r\n    //task is the state of the object and setTask allow us to update the Task\r\n    //useState I am saying the state of the task is an empty string\r\n    const [task, setTask] = useState({ name: \"\", note: \"\", priorityId: 1, isComplete: false, dateTime: \"\" })\r\n    //useParams gets the boardId from application views\r\n    const { boardId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex. history.push takes the user back to the board page\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n\r\n    //useEffect for createBoardId function \r\n    //this allow the user to add a task to a board with the boardId\r\n    useEffect(() => {\r\n\r\n        const createBoardId = () => {\r\n            const newTask = task\r\n            newTask[\"boardId\"] = boardId\r\n            //updating the newTask\r\n            setTask(newTask);\r\n        }\r\n        createBoardId();\r\n    }, [])\r\n\r\n\r\n    //this is updating the task and setting it as the new task and parsing the priority\r\n    //The parseInt function converts its first argument to a string, parses that string, then returns an integer or NaN\r\n    const handleSubmit = (evt) => {\r\n        //stops the user from pushing the button multiply times\r\n        evt.preventDefault()\r\n        //making a copy of task called newTask\r\n        const newTask = { ...task };\r\n        //newTask id equal value\r\n        newTask[evt.target.id] = evt.target.value;\r\n        //paring the priorityId so I comes back as a number and not a string\r\n        newTask.priorityId = parseInt(newTask.priorityId)\r\n        //updating the newTask\r\n        setTask(newTask);\r\n\r\n    }\r\n    //this is creating the new task in the database then taking us back to the board we are currently on \r\n    const createNewTask = (evt) => {\r\n        //if else statement to make sure they enter a name\r\n        if (task.name === \"\") {\r\n            alert(\"Please enter a Task Name\")\r\n\r\n        } else {\r\n            //invoke addTask passing boardId and task as an argument.\r\n            //once complete, go back to the board page \r\n            addTask(boardId, task)\r\n            history.push(`/board/${boardId}`);\r\n        }\r\n    };\r\n\r\n    //function for createDate\r\n    const createDate = () => {\r\n        //updateTaskDate = task\r\n        const updateTaskDate = task\r\n        //then setting the date to current day and time\r\n        updateTaskDate[\"dateTime\"] = Date.now()\r\n        //then updating set task to the updated day and time in the database\r\n        setTask(updateTaskDate)\r\n    }\r\n\r\n    //return 1. input fields to for name, notes, and priority\r\n    //2. submit button with an onClick calling the createDate and CreateNewTask function \r\n    //.3 cancel button that takes the user back to the board they were on. I used the Link to take the back to boards\r\n    //export BoardForm so they can be use on other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Task Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter new task name\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"notes\">Notes</Label>\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                placeholder=\"Enter notes\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"priority\">Choose a Priority</Label>\r\n                            <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                id=\"priorityId\"\r\n                                value={task.priorityId}\r\n                                onChange={(evt) => handleSubmit(evt)}>\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n\r\n                            </select>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning\"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createDate();\r\n                            createNewTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\nexport default TaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js",["134"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n\r\nexport default function DeleteTask() {\r\n    const { task, deleteTask, getTaskById } = useContext(TaskContext);\r\n    const { board } = useContext(BoardContext);\r\n    const { taskId } = useParams();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getTaskById((taskId))\r\n    }, [])\r\n\r\n    const deleteThisTask = () => {\r\n        deleteTask(taskId)\r\n        history.push(`/board/${board.id}`)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {task.name} Task ?</h3>\r\n                <h5>This can not be undone and all SubTask on this Task will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisTask}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js",["135","136"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n\r\n//defining  the TaskEditForm and not passing anything\r\nconst TaskEditForm = () => {\r\n    //bringing in the functions from TaskContext using useContext\r\n    //Task object bring the properties for task \r\n    const { getTaskById, updateTask, task } = useContext(TaskContext)\r\n    //board object bring the properties for board from BoardContext using useContext\r\n    const { board } = useContext(BoardContext)\r\n\r\n    //for edit, hold on to state of task in this view\r\n    //setEditTask allow us to update state\r\n    const [editTask, setEditTask] = useState({\r\n        id: task.id,\r\n        name: \"\",\r\n        notes: \"\",\r\n        priorityId: task.priorityId,\r\n        isComplete: task.isComplete,\r\n        dateCreated: task.dateCreated,\r\n        boardId: task.boardId,\r\n        active: task.active\r\n\r\n    });\r\n    //UseParams pulls in the id information from applications view \r\n    const { taskId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex history.push takes the user back to the board page there were on after editing the task \r\n    const history = useHistory();\r\n\r\n    //useEffects renders the page then come back and gets the taskId\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, [])\r\n\r\n    //sets the task at the start\r\n    useEffect(() => {\r\n        setEditTask(task)\r\n    }, []);\r\n\r\n\r\n    //updating editTask value. Updates editTask value on every key stroke for the input field\r\n    const handleFieldChange = (evt) => {\r\n        //making a copy of editTask called newTask\r\n        const newTask = { ...editTask };\r\n        //saying newTask id equals the value\r\n        newTask[evt.target.id] = evt.target.value;\r\n        //updating the newTask\r\n        setEditTask(newTask);\r\n    };\r\n\r\n    // update function to update the database with the new state of the board name\r\n    const editATask = (event) => {\r\n        //stops the user from hitting the submit button multiply times\r\n        event.preventDefault()\r\n        //updateTask method\r\n        updateTask({\r\n            id: editTask.id,\r\n            name: editTask.name,\r\n            notes: editTask.notes,\r\n            priorityId: editTask.priorityId,\r\n            isComplete: editTask.isComplete,\r\n            dateCreated: editTask.dateCreated,\r\n            boardId: editTask.boardId,\r\n            active: editTask.active\r\n\r\n        })\r\n        //taking the user back to the board they were on \r\n        history.push(`/board/${board.id}`);\r\n    };\r\n    //return 1. input fields for each task property. The name, notes, and priority are the only ones you can change the others are hidden\r\n    //2.submit button with an onClick that calls the editATask function\r\n    //3. cancel button that takes the user back to the board they were on. I used the Link to take then back to the board page.\r\n    //export the TaskEditForm to use in other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input\r\n                                id={editTask.id}\r\n                                onChange={handleFieldChange}\r\n                                type=\"hidden\"\r\n                                value={editTask.id}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Board Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={editTask.name}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                            <Label for=\"name\">Board Notes</Label>\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                value={editTask.notes}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                            <Label for=\"priority\">Priority</Label>\r\n\r\n                            <select\r\n\r\n                                id=\"priorityId\"\r\n                                value={editTask.priorityId}\r\n                                onChange={(evt) => handleFieldChange(evt)}>\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n\r\n                            </select>\r\n\r\n\r\n                        </FormGroup>\r\n                        <Input\r\n                            id={editTask.isComplete}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.isComplete}\r\n                        />\r\n                        <Input\r\n                            id={editTask.dateCreated}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.dateCreated}\r\n                        />\r\n                        <Input\r\n                            id={editTask.boardId}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.boardId}\r\n                        />\r\n                        <Input\r\n                            id={editTask.active}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editTask.active}\r\n                        />\r\n                        <FormGroup>\r\n\r\n                        </FormGroup>\r\n\r\n\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={editATask}\r\n\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default TaskEditForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js",["137"],"import React, { useContext, useEffect } from \"react\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\n\r\n\r\n//defining SubTask function passing the properties of task object\r\nconst SubTask = ({ props }) => {\r\n    //bring in the object subTask and the function getSubTaskById with use context\r\n    const { subTask, getSubTaskById } = useContext(SubTaskContext)\r\n    //getting the subTaskId from application views\r\n    const { subTaskId, boardId, taskId } = useParams();\r\n\r\n    //this useEffect is getting the subTaskById which allows us to get the properties on the subTask like the name\r\n    useEffect(() => {\r\n\r\n        getSubTaskById(subTaskId)\r\n\r\n    }, [])\r\n\r\n    //return 1. back button which take the user back to the task they  were on. I used the Link to go back to task\r\n    //2.subTask name\r\n    return (\r\n        <div>\r\n            <div className='icons'>\r\n                <Link to={`/board/${boardId}/task/${taskId}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        subTask={subTask}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3>{subTask.name} SubTask</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default SubTask;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js",["138"],"import React, { useContext, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\n\r\n\r\n\r\n\r\nconst SubTaskList = ({ subTasks }) => {\r\n\r\n    //bringing in the function getTaskById with useContext\r\n    const { getTaskById, } = useContext(TaskContext)\r\n    //getting the task and board id from application  view\r\n    const { taskId, boardId } = useParams();\r\n\r\n    //useEffect to get the TaskById to get the subtask \r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, []);\r\n\r\n\r\n    //return 1. mapping through the subtask \r\n    //2. Link to subtask.js\r\n    return (\r\n        <div>\r\n\r\n            {subTasks.map((subTask) => (\r\n                <div key={subTask.id}>\r\n                    <Row>\r\n\r\n                        <Col xs=\"3\">\r\n                            <Link to={`/board/${boardId}/task/${subTask.taskId}/subTask/${subTask.id}`}>\r\n                                <strong>{subTask.name}</strong>\r\n                            </Link>\r\n                        </Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/board/${boardId}/task/${taskId}/SubTaskEditForm/${subTask.id}`}>\r\n                                <FiEdit\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    subTask={subTask}\r\n                                    className='edit-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/DeleteSubTask/${subTask.id}`}>\r\n                                <RiDeleteBin5Line\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    className='delete-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row><br></br></Row>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubTaskList;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js",["139","140","141"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\n\r\n\r\n\r\nconst SubTaskForm = () => {\r\n    const { addSubTask } = useContext(SubTaskContext)\r\n    const { task } = useContext(TaskContext);\r\n    const { board } = useContext(BoardContext);\r\n    const [subTask, setSubTask] = useState({ name: \"\", isComplete: false });\r\n    const { taskId, boardId } = useParams();\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect for createTaskId function \r\n    useEffect(() => {\r\n        const createTaskId = () => {\r\n            const newSubTask = subTask\r\n            newSubTask[\"taskId\"] = taskId\r\n            newSubTask[\"boardId\"] = boardId\r\n            setSubTask(newSubTask);\r\n\r\n        }\r\n        createTaskId();\r\n    }, [])\r\n\r\n    //updating the subTask and setting the new subTask\r\n    const handleSubmit = (evt) => {\r\n        evt.preventDefault()\r\n        const newSubTask = { ...subTask };\r\n        newSubTask[evt.target.id] = evt.target.value;\r\n        setSubTask(newSubTask)\r\n    }\r\n\r\n    //making a new subTask and saving it to the database\r\n    const createNewSubTask = () => {\r\n        if (subTask.name === \"\") {\r\n            alert(\"Please enter a SubTask Name\")\r\n        } else {\r\n            addSubTask(subTask, taskId)\r\n            history.push(`/board/${boardId}/task/${taskId}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">SubTask Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter a subTask\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createNewSubTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                </Button>\r\n                    <Link to={`/board/${boardId}/task/${taskId}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\nexport default SubTaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\DeleteSubTask.js",["142"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\"\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\nexport default function DeleteSubTask() {\r\n    const { subTask, deleteSubTask, getSubTaskById } = useContext(SubTaskContext);\r\n    const { task } = useContext(TaskContext)\r\n    const { board } = useContext(BoardContext)\r\n    const { subTaskId } = useParams();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getSubTaskById((subTaskId))\r\n    }, [])\r\n\r\n    const deleteThisSubTask = () => {\r\n        deleteSubTask(subTaskId)\r\n        history.push(`/board/${board.id}/task/${task.id}`)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {subTask.name} SubTask ?</h3>\r\n                <h5>This can not be undone</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisSubTask}>\r\n                        Delete\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}/task/${task.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskEditForm.js",["143","144"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\n\r\n\r\nconst SubTaskEditForm = () => {\r\n    const { getSubTaskById, updateSubTask, subTask } = useContext(SubTaskContext)\r\n    const { task } = useContext(TaskContext)\r\n    const { board } = useContext(BoardContext)\r\n    const [editSubTask, setEditSubTask] = useState({\r\n        id: subTask.id,\r\n        name: \"\",\r\n        isComplete: subTask.isComplete,\r\n        taskId: subTask.taskId,\r\n        active: subTask.active\r\n    })\r\n    const { subTaskId } = useParams();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        getSubTaskById(subTaskId)\r\n\r\n    }, [])\r\n\r\n\r\n    //sets the subTask at the start\r\n    useEffect(() => {\r\n        setEditSubTask(subTask)\r\n    }, []);\r\n\r\n\r\n    //updating editSubTask value. Updates editSubTask value on every key stroke for the input field\r\n    const handleFieldChange = (evt) => {\r\n        //making a copy of editSubTask called newSubTask\r\n        const newSubTask = { ...editSubTask };\r\n        //saying newSubTask id equals the value\r\n        newSubTask[evt.target.id] = evt.target.value;\r\n        //updating the newSubTask\r\n        setEditSubTask(newSubTask);\r\n    };\r\n\r\n    const editASubTask = (event) => {\r\n        //stops the user from hitting the submit button multiply times\r\n        event.preventDefault()\r\n        //updateSubTask method\r\n        updateSubTask({\r\n            id: editSubTask.id,\r\n            name: editSubTask.name,\r\n            isComplete: editSubTask.isComplete,\r\n            taskId: editSubTask.taskId,\r\n            active: editSubTask.active\r\n\r\n        })\r\n        //taking the user back to the board they were on \r\n        history.push(`/board/${board.id}/task/${task.id}`);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input\r\n                                id={editSubTask.id}\r\n                                onChange={handleFieldChange}\r\n                                type=\"hidden\"\r\n                                value={editSubTask.id}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">SubTask Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={editSubTask.name}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <Input\r\n                            id={editSubTask.isComplete}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editSubTask.isComplete}\r\n                        />\r\n                        <Input\r\n                            id={editSubTask.taskId}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editSubTask.taskId}\r\n                        />\r\n                        <Input\r\n                            id={editSubTask.active}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editSubTask.active}\r\n                        />\r\n\r\n                        <FormGroup>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={editASubTask}\r\n\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}/task/${task.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\nexport default SubTaskEditForm",{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"149","severity":1,"message":"150","line":22,"column":8,"nodeType":"151","endLine":22,"endColumn":10,"suggestions":"152"},{"ruleId":"149","severity":1,"message":"153","line":37,"column":8,"nodeType":"151","endLine":37,"endColumn":10,"suggestions":"154"},{"ruleId":"149","severity":1,"message":"155","line":38,"column":8,"nodeType":"151","endLine":38,"endColumn":10,"suggestions":"156"},{"ruleId":"149","severity":1,"message":"157","line":43,"column":8,"nodeType":"151","endLine":43,"endColumn":10,"suggestions":"158"},{"ruleId":"149","severity":1,"message":"155","line":20,"column":8,"nodeType":"151","endLine":20,"endColumn":10,"suggestions":"159"},{"ruleId":"149","severity":1,"message":"155","line":18,"column":8,"nodeType":"151","endLine":18,"endColumn":10,"suggestions":"160"},{"ruleId":"149","severity":1,"message":"161","line":32,"column":8,"nodeType":"151","endLine":32,"endColumn":10,"suggestions":"162"},{"ruleId":"149","severity":1,"message":"163","line":45,"column":8,"nodeType":"151","endLine":45,"endColumn":10,"suggestions":"164"},{"ruleId":"149","severity":1,"message":"165","line":17,"column":8,"nodeType":"151","endLine":17,"endColumn":10,"suggestions":"166"},{"ruleId":"149","severity":1,"message":"165","line":47,"column":8,"nodeType":"151","endLine":47,"endColumn":10,"suggestions":"167"},{"ruleId":"149","severity":1,"message":"168","line":52,"column":8,"nodeType":"151","endLine":52,"endColumn":10,"suggestions":"169"},{"ruleId":"149","severity":1,"message":"170","line":19,"column":8,"nodeType":"151","endLine":19,"endColumn":10,"suggestions":"171"},{"ruleId":"149","severity":1,"message":"165","line":22,"column":8,"nodeType":"151","endLine":22,"endColumn":10,"suggestions":"172"},{"ruleId":"173","severity":1,"message":"174","line":20,"column":13,"nodeType":"175","messageId":"176","endLine":20,"endColumn":17},{"ruleId":"173","severity":1,"message":"177","line":21,"column":13,"nodeType":"175","messageId":"176","endLine":21,"endColumn":18},{"ruleId":"149","severity":1,"message":"178","line":39,"column":8,"nodeType":"151","endLine":39,"endColumn":10,"suggestions":"179"},{"ruleId":"149","severity":1,"message":"170","line":17,"column":8,"nodeType":"151","endLine":17,"endColumn":10,"suggestions":"180"},{"ruleId":"149","severity":1,"message":"170","line":34,"column":8,"nodeType":"151","endLine":34,"endColumn":10,"suggestions":"181"},{"ruleId":"149","severity":1,"message":"182","line":40,"column":8,"nodeType":"151","endLine":40,"endColumn":10,"suggestions":"183"},"no-native-reassign",["184"],"no-negated-in-lhs",["185"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllBoards'. Either include it or remove the dependency array.","ArrayExpression",["186"],"React Hook useEffect has missing dependencies: 'boardId' and 'getTasks'. Either include them or remove the dependency array.",["187"],"React Hook useEffect has missing dependencies: 'boardId' and 'getBoardById'. Either include them or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'board'. Either include it or remove the dependency array.",["189"],["190"],["191"],"React Hook useEffect has missing dependencies: 'getSubTasks', 'getTaskById', and 'taskId'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'boardId' and 'task'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'getTaskById' and 'taskId'. Either include them or remove the dependency array.",["194"],["195"],"React Hook useEffect has a missing dependency: 'task'. Either include it or remove the dependency array.",["196"],"React Hook useEffect has missing dependencies: 'getSubTaskById' and 'subTaskId'. Either include them or remove the dependency array.",["197"],["198"],"no-unused-vars","'task' is assigned a value but never used.","Identifier","unusedVar","'board' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'boardId', 'subTask', and 'taskId'. Either include them or remove the dependency array.",["199"],["200"],["201"],"React Hook useEffect has a missing dependency: 'subTask'. Either include it or remove the dependency array.",["202"],"no-global-assign","no-unsafe-negation",{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"207","fix":"211"},{"desc":"207","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"217","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"217","fix":"224"},{"desc":"225","fix":"226"},{"desc":"222","fix":"227"},{"desc":"222","fix":"228"},{"desc":"229","fix":"230"},"Update the dependencies array to be: [getAllBoards]",{"range":"231","text":"232"},"Update the dependencies array to be: [boardId, getTasks]",{"range":"233","text":"234"},"Update the dependencies array to be: [boardId, getBoardById]",{"range":"235","text":"236"},"Update the dependencies array to be: [board]",{"range":"237","text":"238"},{"range":"239","text":"236"},{"range":"240","text":"236"},"Update the dependencies array to be: [getSubTasks, getTaskById, taskId]",{"range":"241","text":"242"},"Update the dependencies array to be: [boardId, task]",{"range":"243","text":"244"},"Update the dependencies array to be: [getTaskById, taskId]",{"range":"245","text":"246"},{"range":"247","text":"246"},"Update the dependencies array to be: [task]",{"range":"248","text":"249"},"Update the dependencies array to be: [getSubTaskById, subTaskId]",{"range":"250","text":"251"},{"range":"252","text":"246"},"Update the dependencies array to be: [boardId, subTask, taskId]",{"range":"253","text":"254"},{"range":"255","text":"251"},{"range":"256","text":"251"},"Update the dependencies array to be: [subTask]",{"range":"257","text":"258"},[798,800],"[getAllBoards]",[1767,1769],"[boardId, getTasks]",[1197,1199],"[boardId, getBoardById]",[1298,1300],"[board]",[879,881],[541,543],[1270,1272],"[getSubTasks, getTaskById, taskId]",[1597,1599],"[boardId, task]",[583,585],"[getTaskById, taskId]",[1641,1643],[1739,1741],"[task]",[775,777],"[getSubTaskById, subTaskId]",[694,696],[1111,1113],"[boardId, subTask, taskId]",[714,716],[1013,1015],[1122,1124],"[subTask]"]