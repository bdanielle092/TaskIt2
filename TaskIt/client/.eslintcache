[{"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js":"1","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js":"2","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js":"3","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js":"4","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js":"5","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js":"6","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js":"7","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js":"8","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js":"9","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js":"10","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js":"11","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js":"12","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js":"13","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js":"14","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js":"15","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js":"16","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js":"17","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js":"18","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js":"19","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js":"20","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js":"21","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js":"22","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js":"23","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js":"24","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js":"25","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\DeleteSubTask.js":"26","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskEditForm.js":"27","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\PriorityProvider.js":"28"},{"size":716,"mtime":1612459642743,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"30"},{"size":1040,"mtime":1616170772930,"results":"32","hashOfConfig":"30"},{"size":3995,"mtime":1616374627394,"results":"33","hashOfConfig":"30"},{"size":3624,"mtime":1614482410135,"results":"34","hashOfConfig":"30"},{"size":1969,"mtime":1616374545097,"results":"35","hashOfConfig":"30"},{"size":2536,"mtime":1614482401009,"results":"36","hashOfConfig":"30"},{"size":3800,"mtime":1612459642757,"results":"37","hashOfConfig":"30"},{"size":2157,"mtime":1616469188300,"results":"38","hashOfConfig":"30"},{"size":3805,"mtime":1616368948822,"results":"39","hashOfConfig":"30"},{"size":4460,"mtime":1615997300379,"results":"40","hashOfConfig":"30"},{"size":2644,"mtime":1616384876142,"results":"41","hashOfConfig":"30"},{"size":3350,"mtime":1616387251578,"results":"42","hashOfConfig":"30"},{"size":4293,"mtime":1616444043404,"results":"43","hashOfConfig":"30"},{"size":2109,"mtime":1616460512342,"results":"44","hashOfConfig":"30"},{"size":4293,"mtime":1616462161899,"results":"45","hashOfConfig":"30"},{"size":3339,"mtime":1616430902640,"results":"46","hashOfConfig":"30"},{"size":4567,"mtime":1616462047789,"results":"47","hashOfConfig":"30"},{"size":6006,"mtime":1616431229888,"results":"48","hashOfConfig":"30"},{"size":2449,"mtime":1616371724994,"results":"49","hashOfConfig":"30"},{"size":3909,"mtime":1616519704948,"results":"50","hashOfConfig":"30"},{"size":3937,"mtime":1616106489846,"results":"51","hashOfConfig":"30"},{"size":1393,"mtime":1616371873393,"results":"52","hashOfConfig":"30"},{"size":3881,"mtime":1616379665555,"results":"53","hashOfConfig":"30"},{"size":4248,"mtime":1616372878168,"results":"54","hashOfConfig":"30"},{"size":2628,"mtime":1616374127579,"results":"55","hashOfConfig":"30"},{"size":5601,"mtime":1616432315883,"results":"56","hashOfConfig":"30"},{"size":2912,"mtime":1616170726342,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"v3c2y3",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"60"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"60"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"60"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"60"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"60"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"60"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\index.js",[],["128","129"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\reportWebVitals.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\App.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\ApplicationViews.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\UserProfileProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Header.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Login.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\pages\\Register.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Home.js",["130"],"import React, { useContext, useEffect } from 'react';\r\nimport { BoardContext } from '../providers/BoardProvider';\r\nimport BoardList from \"./Board/BoardList\";\r\nimport { Col } from \"reactstrap\"\r\nimport \"./Home.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\n\r\nconst Home = () => {\r\n    //getting the user\r\n    const user = JSON.parse(localStorage.getItem(\"userProfile\"));\r\n    //getting the method and board object from boardContext using useContext\r\n    const { getAllBoards, boards } = useContext(BoardContext);\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    const history = useHistory();\r\n\r\n\r\n\r\n    //useEffect is automatically invoked and since the dependency array is empty, it only runs the first time the component renders.You can include dependencies in the array to cause the useEffect to run additional times.\r\n    useEffect(() => {\r\n\r\n        getAllBoards();\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    const goToBoardForm = () => {\r\n        history.push(\"/BoardForm\");\r\n    }\r\n\r\n    // return 1. Welcome to the user\r\n    //Split a string into an array of substrings and [0] will get the first item in the array\r\n    // I only wanted to show the users first name \r\n    //2. tells the user to click on a board\r\n    //3. add a board\r\n    //4.back arrow\r\n    //5. list of Boards\r\n    //export the home page so it can be use on other components\r\n    return (\r\n\r\n        <div>\r\n\r\n\r\n            <h1 className=\"home\">Welcome {user.name.split(\" \")[0]}!</h1>\r\n            <p className=\"home2\">Click on a Board to view tasks</p>\r\n            <div className='homeIconContainer'>\r\n                <p className=\"AddBoardName\">Add Board</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToBoardForm}\r\n                    className='home-plus-icon' />\r\n            </div>\r\n            <Col className=\"listOfBoards\">\r\n\r\n                <BoardList boards={boards} />\r\n\r\n            </Col>\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default Home\r\n\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardForm.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\BoardProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardList.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\Board.js",["131","132"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { Col } from \"reactstrap\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport TaskList from \"../Task/TaskList\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\nimport \"./Board.css\"\r\n\r\n//this whole thing is a method and we are passing the properties. Then we are exporting it at the end so we can use in in other components \r\nconst Board = ({ props }) => {\r\n    //bringing in the methods from BoardProvider with useContext\r\n    //we bringing in board object to get the properties of a board \r\n    const { board, getBoardById } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from application view\r\n    const { boardId } = useParams();\r\n    //bringing in methods from TaskProvider using TaskContext \r\n    //we bringing tasks to get the properties of the tasks \r\n    const { getTasks, tasks } = useContext(TaskContext);\r\n    //useHistory allows you undo or redo things in your app.\r\n    //an example in this page is we can go back to pervious page if we decide we don't want to be on the board card. \r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //getTasks get the task on a board\r\n    //getBoardById is getting the board info for a single board\r\n    //this get the board name by getting board by Id\r\n    useEffect(() => {\r\n        getBoardById(boardId)\r\n        getTasks(boardId);\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    // we use history.push to take the user to the add task form \r\n    const goToTaskForm = () => {\r\n        history.push(`/Board/${boardId}/TaskForm`);\r\n    }\r\n    //In this return 1. we have a back arrow icon which takes the use back to the previous page\r\n    //2. We display the name of the board we are on \r\n    //3. we have an add icon which take the user to the add task form \r\n    //4. We display the list of tasks on this board\r\n    //last we export the board so we can import it in other components\r\n    return (\r\n        <div>\r\n            <div className='icons'>\r\n                <Link to={\"/\"}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        board={board}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n\r\n            <h3 className=\"BoardName\">{board.name} Board</h3>\r\n            <p className=\"NumberOfTask\">Total Tasks: {tasks.length}</p>\r\n\r\n            <div className='BoardContainer'>\r\n                <p className=\"AddTaskName\">Add Task</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToTaskForm}\r\n                    className='task-plus-icon' />\r\n            </div>\r\n\r\n\r\n            <Col className=\"listOfTasks\" >\r\n                <TaskList tasks={tasks} />\r\n            </Col>\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Board","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\BoardEditForm.js",["133"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { UserProfileContext } from \"../../providers/UserProfileProvider\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\n\r\n\r\n\r\nconst BoardEditForm = () => {\r\n    const { getToken } = useContext(UserProfileContext)\r\n    const { boardId } = useParams();\r\n    const history = useHistory();\r\n    //this is a empty string but when the page initially gets loaded then the string will be updated with the current name of the board\r\n    const [boardToEdit, setBoardToEdit] = useState(\"\")\r\n    //this the existing board object that is gets loads at initial load too.\r\n    const [existingBoard, setExistingBoard] = useState({})\r\n\r\n    // you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //this is getting the current state of the board base off the id passed in the uri and setting existingBoard and boardToEdit\r\n    useEffect(() => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/board/${boardId}`, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                })\r\n            )\r\n            .then((res) => res.json())\r\n            .then((board) => {\r\n                setExistingBoard(board)\r\n                setBoardToEdit(board[\"name\"])\r\n            });\r\n\r\n    }, []);\r\n\r\n    //updating boardToEdit value. Updates boardToEdit value on every key stroke for the input field\r\n    const handleSubmit = (evt) => {\r\n        const newBoard = evt.target.value;\r\n        setBoardToEdit(newBoard);\r\n    };\r\n\r\n    // update function to update the database with the new state of the board name\r\n    const updateBoard = (board) => {\r\n        getToken()\r\n            .then((token) =>\r\n                fetch(`/api/board/${boardId}`, {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        Authorization: `Bearer ${token}`,\r\n                    },\r\n                    body: JSON.stringify({\r\n                        //keeping all the existing keys the same except name\r\n                        \"active\": existingBoard[\"active\"],\r\n                        \"id\": existingBoard[\"id\"],\r\n                        \"name\": boardToEdit,\r\n                        \"userProfile\": existingBoard[\"userProfile\"],\r\n                        \"userProfileId\": existingBoard[\"userProfileId\"]\r\n                    }),\r\n                })\r\n            )\r\n            .then((evt) => history.push(\"/\"));\r\n    };\r\n\r\n\r\n    //taking the user back to the home page\r\n    const goBackHome = () => {\r\n        history.push(`/`);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Board Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={boardToEdit}\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleSubmit(evt)\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            updateBoard(boardToEdit);\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Button outline color=\"info\" onClick={goBackHome}>\r\n                        Cancel\r\n              </Button>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\nexport default BoardEditForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Board\\DeleteBoard.js",["134"],"import React, { useEffect, useContext } from \"react\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n//defining and exporting the DeleteBoardForm\r\nexport default function DeleteBoard() {\r\n    //bringing in the methods from BoardContext using useContext\r\n    const { board, deleteBoard, getBoardById } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from ApplicationView\r\n    const { boardId } = useParams();\r\n    //useHistory will allow us to undo/redo and change or navigate to other pages\r\n    //ex. I use history to take the user back home after deleting a board\r\n    const history = useHistory();\r\n\r\n    //useEffect will render then come back and get the boardId\r\n    useEffect(() => {\r\n        getBoardById((boardId))\r\n    }, [])\r\n\r\n    //deleteThisBoard function. We delete the board and push it back home.\r\n    const deleteThisBoard = () => {\r\n        console.log(board)\r\n        deleteBoard(boardId)\r\n        history.push(\"/\")\r\n    }\r\n\r\n    //return 1. Ask the user if they are user they want to delete\r\n    //2. letting them know this can not be undone\r\n    //3. button to delete the board. onClick that calls the deleteThisBoard function.\r\n    //4. cancel button that takes the user back home. I used the Link to go back home\r\n    //export the DeleteBoard so we can use it in other components\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {board.name} board ?</h3>\r\n                <h5>This can not be undone and all Tasks on this board will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisBoard}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskList.js",["135","136","137"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Row, Col } from \"reactstrap\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport \"./task.css\"\r\n\r\n\r\n//defining the method TaskList and passing in the tasks object\r\nconst TaskList = ({ tasks }) => {\r\n\r\n    //get the method from BoardContext using useContext\r\n    // const { getBoardById } = useContext(BoardContext);\r\n    //get the method from TaskContext using useContext\r\n    const { TaskToggle } = useContext(TaskContext)\r\n    //getting boardId from application views \r\n    const { boardId } = useParams();\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //get the board by Id\r\n    // useEffect(() => {\r\n    //     getBoardById(boardId)\r\n\r\n    // }, [])\r\n\r\n    //checked it a function that passes the params tasId and isComplete\r\n    //if the task is complete we return the function TaskToggle and pass the params boardId, taskId and false \r\n    //else we return TaskToggle and pass the params boardId, taskId, and true  \r\n    const Checked = (taskId, isComplete) => {\r\n\r\n        if (isComplete === true) {\r\n            return TaskToggle(boardId, taskId, false)\r\n        }\r\n        else {\r\n            return TaskToggle(boardId, taskId, true)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    //return 1.mapping through the list of tasks\r\n    //xs is at the smallest size it will take up the amount of space we give it. If you wanted to take the whole space you would be 12 auto what is left out of that pie graph \r\n    //I used the Row to have the icons next to the BoardName vertically and Col have the BoardName and icon list horizontally. The extra Row and Col is to help with spacing\r\n    //2. checkbox\r\n    //3. link to task.js\r\n    //4. edit icon with link to editForm\r\n    //5. delete icon with link to deleteForm \r\n    //export the taskList so it can be use in other components\r\n\r\n    return (\r\n        <div>\r\n            {tasks.map((task) => (\r\n                <div key={task.id} >\r\n                    <Row>\r\n                        <Col xs=\"3\">\r\n                            <div className={task.isComplete ? \"Task strike\" : \"Task\"}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={task.id}\r\n                                    name=\"IsComplete\"\r\n                                    checked={task.isComplete}\r\n                                    onChange={() => (Checked(task.id, task.isComplete))} />\r\n\r\n                                <Link to={`/board/${task.boardId}/task/${task.id}`}>\r\n                                    <strong>{task.name}</strong>\r\n                                </Link>\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/board/${boardId}/TaskEditForm/${task.id}`}>\r\n                                <FiEdit\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    task={task}\r\n                                    className='edit-icon' />\r\n                            </Link>\r\n                        </Col>\r\n\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/DeleteTask/${task.id}`}>\r\n                                <RiDeleteBin5Line\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    className='delete-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row><br></br></Row>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default TaskList","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\Task.js",["138"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\nimport { useParams, Link, useHistory } from \"react-router-dom\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport SubTaskList from \"../SubTask/SubTaskList\";\r\nimport { Col } from \"reactstrap\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { AiOutlinePlusCircle } from \"react-icons/ai\";\r\n\r\n\r\n\r\n\r\n\r\n//defining Task function passing the properties of task object\r\nconst Task = ({ props }) => {\r\n    //bringing the method and task object from TaskContext by  using useContext\r\n    const { getTaskById, task } = useContext(TaskContext)\r\n    //using useParams to get the taskId from application views\r\n    const { taskId, boardId } = useParams();\r\n    //bringing the methods from SubTaskContext by using useContext\r\n    const { getSubTasks, subTasks } = useContext(SubTaskContext)\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    //getTaskById is getting the task info for a single task \r\n    //getSubTasks get the subtask on a task\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n        getSubTasks(taskId)\r\n\r\n\r\n\r\n    }, [])\r\n\r\n\r\n    //taking the user to the board form \r\n    // we use history.push to take the user to the add task form \r\n    const goToSubTaskForm = () => {\r\n        history.push(`/Board/${boardId}/task/${taskId}/SubTaskForm`);\r\n    }\r\n\r\n\r\n    //return 1.back arrow icon to take the user back to the board they were on. I used the Link to go back to the board page\r\n    //2. Name Of task header\r\n    //3.Notes header\r\n    //4. paragraph tag to display the notes\r\n    //5.Name of subTask header\r\n    //6. list of subTask\r\n    //7. Priority header\r\n    //8. number of the priority the user pick\r\n    //9. date created header and dated created info \r\n    //export the Task so it can be used in other component\r\n    return (\r\n        <div>\r\n\r\n            <div className='icons'>\r\n                <Link to={`/board/${boardId}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        task={task}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3 className=\"TaskName\">{task.name} Task</h3>\r\n            <h3>Notes</h3>\r\n            <p>{task.notes}</p>\r\n            <h3>SubTask</h3>\r\n            <div className='BoardContainer'>\r\n                <p className=\"AddSubTaskName\">Add SubTask</p>\r\n                <AiOutlinePlusCircle\r\n                    size=\"2em\"\r\n                    color=\"#2A9d8F\"\r\n                    onClick={goToSubTaskForm}\r\n                    className='subTask-plus-icon' />\r\n            </div>\r\n            <Col className=\"listOfSubTasks\">\r\n                <SubTaskList subTasks={subTasks} />\r\n            </Col>\r\n            <h3>Priority</h3>\r\n            <p>{task.priorityId}</p>\r\n\r\n\r\n\r\n\r\n            <h3>Date Created: {task.dateCreated}</h3>\r\n\r\n\r\n\r\n        </div>\r\n\r\n\r\n    )\r\n}\r\nexport default Task","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\TaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskForm.js",["139"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\n\r\n//defining the taskForm and not passing anything\r\nconst TaskForm = () => {\r\n    //brining in the add function from TaskContext using useContext\r\n    const { addTask } = useContext(TaskContext)\r\n    //we bringing in board object to get the properties of a board \r\n    const { board } = useContext(BoardContext)\r\n    //task is the state of the object and setTask allow us to update the Task\r\n    //useState I am saying the state of the task is an empty string\r\n    const [task, setTask] = useState({ name: \"\", note: \"\", priorityId: 1, isComplete: false, dateTime: \"\" })\r\n    //useParams gets the boardId from application views\r\n    const { boardId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex. history.push takes the user back to the board page\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n\r\n    //useEffect for createBoardId function \r\n    //this allow the user to add a task to a board with the boardId\r\n    useEffect(() => {\r\n\r\n        const createBoardId = () => {\r\n            //making a copy of task \r\n            const newTask = task\r\n            //then setting the boardId to current boardId\r\n            newTask[\"boardId\"] = boardId\r\n            //updating state\r\n            setTask(newTask);\r\n        }\r\n        //calling the function \r\n        createBoardId();\r\n    }, [])\r\n\r\n\r\n    //this is updating the task and setting it as the new task and parsing the priority\r\n    //The parseInt function converts its first argument to a string, parses that string, then returns an integer or NaN\r\n    const handleSubmit = (evt) => {\r\n        //stops the user from pushing the button multiply times\r\n        evt.preventDefault()\r\n        //making a copy of task called newTask\r\n        const newTask = { ...task };\r\n        //task is an object with properties.\r\n        //set the property to the new value using the  bracket notation\r\n        newTask[evt.target.id] = evt.target.value;\r\n        //paring the priorityId so it comes back as a number and not a string\r\n        newTask.priorityId = parseInt(newTask.priorityId)\r\n        //updating the newTask\r\n        setTask(newTask);\r\n\r\n    }\r\n    //this is creating the new task in the database then taking us back to the board we are currently on \r\n    const createNewTask = (evt) => {\r\n        //if else statement to make sure they enter a name\r\n        if (task.name === \"\") {\r\n            alert(\"Please enter a Task Name\")\r\n\r\n        } else {\r\n            //invoke addTask passing boardId and task as an argument.\r\n            //once complete, go back to the board page \r\n            addTask(boardId, task)\r\n            history.push(`/board/${boardId}`);\r\n        }\r\n    };\r\n\r\n    //function for createDate\r\n    const createDate = () => {\r\n        //making a copy of task\r\n        const updateTaskDate = task\r\n        //then setting the date to current day and time\r\n        updateTaskDate[\"dateTime\"] = Date.now()\r\n        //updating state\r\n        setTask(updateTaskDate)\r\n    }\r\n\r\n    //return 1. input fields to for name, notes, and priority\r\n    //2. submit button with an onClick calling the createDate and CreateNewTask function \r\n    //.3 cancel button that takes the user back to the board they were on. I used the Link to take the back to boards\r\n    //export BoardForm so they can be use on other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">Task Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter new task name\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"notes\">Notes</Label>\r\n                            <Input\r\n                                id=\"notes\"\r\n                                type=\"text\"\r\n                                name=\"notes\"\r\n                                placeholder=\"Enter notes\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                            <Label for=\"priority\">Choose a Priority</Label>\r\n                            <select\r\n                                required\r\n                                className=\"form-control\"\r\n                                id=\"priorityId\"\r\n                                value={task.priorityId}\r\n                                onChange={(evt) => handleSubmit(evt)}>\r\n                                <option value=\"1\">None</option>\r\n                                <option value=\"2\">Low</option>\r\n                                <option value=\"3\">Medium</option>\r\n                                <option value=\"4\">High</option>\r\n\r\n                            </select>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning\"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createDate();\r\n                            createNewTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n};\r\nexport default TaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\DeleteTask.js",["140"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\n\r\n\r\nexport default function DeleteTask() {\r\n    //bringing in the methods and task object from TaskContext using useContext\r\n    const { task, deleteTask, getTaskById } = useContext(TaskContext);\r\n    //bringing in the board object \r\n    const { board } = useContext(BoardContext);\r\n    //useParams allow us to get the boardId from ApplicationView\r\n    const { taskId } = useParams();\r\n    //useHistory will allow us to undo/redo and change or navigate to other pages\r\n    //ex. I use history to take the user back to the board page after deleting a task\r\n    const history = useHistory();\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    useEffect(() => {\r\n        getTaskById((taskId))\r\n    }, [])\r\n\r\n    //deleteThisTask function. We delete the board and push it back to the board page.\r\n    const deleteThisTask = () => {\r\n        deleteTask(taskId)\r\n        history.push(`/board/${board.id}`)\r\n    }\r\n\r\n    //return 1. Ask the user if they are user they want to delete this task\r\n    //2. letting them know this can not be undone\r\n    //3. button to delete the task. onClick that calls the deleteThisTask function.\r\n    //4. cancel button that takes the user back to the board page they were on . I used the Link to go back to the board\r\n    //export the DeleteTask so we can use it in other components\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {task.name} Task ?</h3>\r\n                <h5>This can not be undone and all SubTask on this Task will be delete too</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisTask}>\r\n                        Delete\r\n                        </Button>\r\n                    <Link to={`/board/${board.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\Task\\TaskEditForm.js",["141"],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\SubTaskProvider.js",[],"C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTask.js",["142"],"import React, { useContext, useEffect } from \"react\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport { useParams, Link } from \"react-router-dom\";\r\nimport { TiArrowBack } from \"react-icons/ti\";\r\n\r\n\r\n//defining SubTask function passing the properties of task object\r\nconst SubTask = ({ props }) => {\r\n    //bring in the object subTask and the function getSubTaskById with use context\r\n    const { subTask, getSubTaskById } = useContext(SubTaskContext)\r\n    //getting the subTaskId from application views\r\n    const { subTaskId, boardId, taskId } = useParams();\r\n\r\n    //this useEffect is getting the subTaskById which allows us to get the properties on the subTask like the name\r\n    useEffect(() => {\r\n\r\n        getSubTaskById(subTaskId)\r\n\r\n    }, [])\r\n\r\n    //return 1. back button which take the user back to the task they  were on. I used the Link to go back to task\r\n    //2.subTask name\r\n    return (\r\n        <div>\r\n            <div className='icons'>\r\n                <Link to={`/board/${boardId}/task/${taskId}`}>\r\n                    <TiArrowBack\r\n                        size=\"2em\"\r\n                        color=\"#2A9d8F\"\r\n                        subtask={subTask}\r\n                        className='back-icon' />\r\n                </Link>\r\n            </div>\r\n            <h3>{subTask.name} SubTask</h3>\r\n        </div>\r\n    )\r\n}\r\nexport default SubTask;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskList.js",["143","144"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { Col, Row } from \"reactstrap\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { RiDeleteBin5Line } from \"react-icons/ri\";\r\nimport { FiEdit } from \"react-icons/fi\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\nimport \"./subTask.css\"\r\n\r\n\r\n//defining the SubTaskList and passing the subTask object\r\nconst SubTaskList = ({ subTasks }) => {\r\n\r\n    //bringing in the function getTaskById with useContext\r\n    const { getTaskById, } = useContext(TaskContext)\r\n    //bring in the methods from SubTaskContext with useContext \r\n    const { SubTaskToggle } = useContext(SubTaskContext)\r\n    //getting the task and board id from application  view\r\n    const { taskId, boardId } = useParams();\r\n\r\n\r\n    //useEffect to get the TaskById to get the subtask on the task page\r\n    useEffect(() => {\r\n        getTaskById(taskId)\r\n\r\n    }, []);\r\n\r\n    //function to check if the task is done true or false not done. bringing in the toggle function. the !check means it will do the opposite of what is \r\n    const Checked = (subTaskId, isComplete) => {\r\n\r\n        if (isComplete === true) {\r\n            return SubTaskToggle(taskId, subTaskId, false)\r\n        }\r\n        else {\r\n            return SubTaskToggle(taskId, subTaskId, true)\r\n        }\r\n    }\r\n    //return 1. mapping through the subtask \r\n    //2. Link to subtask.js\r\n    //3. checkbox to mark a task complete\r\n    //4. edit icon I use a link to take the user to the SubtaskEditForm\r\n    //5. delete icon I use a link to take the user to the delete form \r\n    //exporting the subTaskList so it can be use in other components\r\n    return (\r\n        <div>\r\n\r\n            {subTasks.map((subTask) => (\r\n                <div key={subTask.id}>\r\n                    <Row>\r\n\r\n                        <Col xs=\"3\">\r\n                            <div className={subTask.isComplete ? \"SubTask strike\" : \"SubTask\"}>\r\n                                <input\r\n                                    type=\"checkbox\"\r\n                                    id={subTask.id}\r\n                                    name=\"IsComplete\"\r\n                                    checked={subTask.isComplete}\r\n                                    onChange={() => (Checked(subTask.id, subTask.isComplete))} />\r\n                                {subTask.name}\r\n                                {/* <Link to={`/board/${boardId}/task/${subTask.taskId}/subTask/${subTask.id}`}>\r\n                                <strong>{subTask.name}</strong>\r\n                            </Link> */}\r\n                            </div>\r\n                        </Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"auto\"></Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/board/${boardId}/task/${taskId}/SubTaskEditForm/${subTask.id}`}>\r\n                                <FiEdit\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    subtask={subTask}\r\n                                    className='edit-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                        <Col xs=\"2\" className='icons'>\r\n                            <Link to={`/DeleteSubTask/${subTask.id}`}>\r\n                                <RiDeleteBin5Line\r\n                                    size=\"2em\"\r\n                                    color=\"#2A9d8F\"\r\n                                    className='delete-icon' />\r\n                            </Link>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row><br></br></Row>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubTaskList;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskForm.js",["145","146","147"],"import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\n\r\n\r\n\r\nconst SubTaskForm = () => {\r\n    // bringing in add method from SubTaskContext using useContext\r\n    const { addSubTask } = useContext(SubTaskContext)\r\n    // const { task } = useContext(TaskContext);\r\n    // const { board } = useContext(BoardContext);\r\n    //setting state and updating state\r\n    const [subTask, setSubTask] = useState({ name: \"\", isComplete: false });\r\n    //getting ids from application views\r\n    const { taskId, boardId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex. history.push takes the user back to the task page\r\n    const history = useHistory();\r\n\r\n\r\n\r\n\r\n    //useEffect for createTaskId function \r\n    //this allow the user to add a subTask to a task with the taskId and  boardId\r\n    useEffect(() => {\r\n        const createTaskId = () => {\r\n            //making a copy of subtask\r\n            const newSubTask = subTask\r\n            //then setting the taskId to current taskId\r\n            newSubTask[\"taskId\"] = taskId\r\n            //then setting the boardId to current boardId\r\n            newSubTask[\"boardId\"] = boardId\r\n            //updating state\r\n            setSubTask(newSubTask);\r\n\r\n        }\r\n        //calling the function \r\n        createTaskId();\r\n    }, [])\r\n\r\n    //updating the subTask and setting the new subTask\r\n    const handleSubmit = (evt) => {\r\n        //stops the user from push the button multiple times\r\n        evt.preventDefault()\r\n        //makes a copy of subtask\r\n        const newSubTask = { ...subTask };\r\n        //Subtask is an object with properties\r\n        //set the property to the new value using bracket notation\r\n        newSubTask[evt.target.id] = evt.target.value;\r\n        //updating state\r\n        setSubTask(newSubTask)\r\n    }\r\n\r\n    //function to make a new subTask and saving it to the database\r\n    const createNewSubTask = () => {\r\n        //if else statement alerts a user to add a name if they leave it empty\r\n        if (subTask.name === \"\") {\r\n            alert(\"Please enter a SubTask Name\")\r\n            //invoke addSubTask passing subTask and taskId  argument.\r\n            //once complete, go back to the task page \r\n        } else {\r\n            addSubTask(subTask, taskId)\r\n            history.push(`/board/${boardId}/task/${taskId}`);\r\n        }\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n    //return 1. input fields to for name\r\n    //2. submit button with an onClick calling the CreateNewSubTask function \r\n    //.3 cancel button that takes the user back to the task they were on. I used the Link to take the back to tasks\r\n    //export SubTaskForm so they can be use on other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">SubTask Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                placeholder=\"Enter a subTask\"\r\n                                onChange={(evt) => handleSubmit(evt)}\r\n                            />\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={(evt) => {\r\n                            evt.preventDefault();\r\n                            createNewSubTask();\r\n                        }}\r\n                    >\r\n                        SUBMIT\r\n                </Button>\r\n                    <Link to={`/board/${boardId}/task/${taskId}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    );\r\n};\r\nexport default SubTaskForm;","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\DeleteSubTask.js",["148"],"import React, { useEffect, useContext } from \"react\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\"\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport { Button } from \"reactstrap\"\r\n\r\nexport default function DeleteSubTask() {\r\n    //brining in methods and subTask object from SubTaskContext from useContext\r\n    const { subTask, deleteSubTask, getSubTaskById } = useContext(SubTaskContext);\r\n    //bringing in the task object \r\n    const { task } = useContext(TaskContext)\r\n    //bringing in the board object \r\n    const { board } = useContext(BoardContext)\r\n    //useParams allow us to get the boardId from ApplicationView\r\n    const { subTaskId } = useParams();\r\n    //useHistory will allow us to undo/redo and change or navigate to other pages\r\n    //ex. I use history to take the user back to the task page after deleting a subTask\r\n    const history = useHistory();\r\n\r\n    //useEffect - you tell React that your component needs to do something after render. React will remember the function you passed (we'll refer to it as our “effect”), and call it later after performing the DOM updates.\r\n    useEffect(() => {\r\n        getSubTaskById((subTaskId))\r\n    }, [])\r\n\r\n    //deleteThisSubTask function. We delete the subTask and push it back to the task page.\r\n    const deleteThisSubTask = () => {\r\n        deleteSubTask(subTaskId)\r\n        history.push(`/board/${board.id}/task/${task.id}`)\r\n    }\r\n\r\n    //return 1. Ask the user if they are user they want to delete this subTask\r\n    //2. letting them know this can not be undone\r\n    //3. button to delete the subTask. onClick that calls the deleteThisSubTask function.\r\n    //4. cancel button that takes the user back to the task page they were on . I used the Link to go back to the task\r\n    //export the DeleteSubTask so we can use it in other components\r\n    return (\r\n        <>\r\n            <div className=\"delete-confirm-container\">\r\n                <h3> Are you sure you want to delete {subTask.name} SubTask ?</h3>\r\n                <h5>This can not be undone</h5>\r\n\r\n                <div className=\"row\">\r\n                    <Button\r\n                        color=\"warning \"\r\n                        onClick={deleteThisSubTask}>\r\n                        Delete\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}/task/${task.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </>\r\n    )\r\n}","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\components\\SubTask\\SubTaskEditForm.js",["149","150"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory, useParams, Link } from \"react-router-dom\";\r\nimport {\r\n    Form,\r\n    FormGroup,\r\n    Card,\r\n    CardBody,\r\n    Label,\r\n    Input,\r\n    Button,\r\n} from \"reactstrap\";\r\nimport { BoardContext } from \"../../providers/BoardProvider\";\r\nimport { TaskContext } from \"../../providers/TaskProvider\";\r\nimport { SubTaskContext } from \"../../providers/SubTaskProvider\";\r\n\r\n\r\nconst SubTaskEditForm = () => {\r\n    //bringing in methods and subtask object from subTaskContext using useContext\r\n    const { getSubTaskById, updateSubTask, subTask } = useContext(SubTaskContext)\r\n    //bringing in task object from TaskContext using usContext \r\n    const { task } = useContext(TaskContext)\r\n    //bringing in board object from BoardContext using usContext \r\n    const { board } = useContext(BoardContext)\r\n    const { subTaskId } = useParams()\r\n    //setting and updating state\r\n    const [editSubTask, setEditSubTask] = useState({\r\n        id: subTask.id,\r\n        name: \"\",\r\n        isComplete: subTask.isComplete,\r\n        taskId: subTask.taskId,\r\n        active: subTask.active\r\n    })\r\n    //getting subTaskId from application views\r\n    // const { subTaskId } = useParams();\r\n    //useHistory allows us to undo/redo and change or navigate to different pages\r\n    //ex. history.push takes the user back to the task page\r\n    const history = useHistory();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getSubTaskById(subTaskId)\r\n\r\n    }, [])\r\n\r\n\r\n    //sets the subTask at the start\r\n    useEffect(() => {\r\n        setEditSubTask(subTask)\r\n    }, []);\r\n\r\n\r\n    //updating editSubTask value. Updates editSubTask value on every key stroke for the input field\r\n    const handleFieldChange = (evt) => {\r\n        //making a copy of editSubTask called newSubTask\r\n        const newSubTask = { ...editSubTask };\r\n        //task is an object with properties.\r\n        //set the property to the new value using the  bracket notation\r\n        //saying newSubTask id equals the value\r\n        newSubTask[evt.target.id] = evt.target.value;\r\n        //updating state\r\n        setEditSubTask(newSubTask);\r\n    };\r\n\r\n    //function to update the SubTask to the database\r\n    const editASubTask = (event) => {\r\n        //stops the user from hitting the submit button multiply times\r\n        event.preventDefault()\r\n        //updateSubTask method\r\n        updateSubTask({\r\n            id: editSubTask.id,\r\n            name: editSubTask.name,\r\n            isComplete: editSubTask.isComplete,\r\n            taskId: editSubTask.taskId,\r\n            active: editSubTask.active\r\n\r\n        })\r\n        //taking the user back to the board they were on \r\n        history.push(`/board/${board.id}/task/${task.id}`);\r\n    };\r\n\r\n    //return 1. input fields for each subTask property. The name is the the only ones you can change the others are hidden\r\n    //2.submit button with an onClick that calls the editASubTask function\r\n    //3. cancel button that takes the user back to the task they were on. I used the Link to take then back to the task page.\r\n    //export the SubTaskEditForm to use in other components\r\n    return (\r\n        <div>\r\n            <Card>\r\n                <CardBody>\r\n                    <Form>\r\n                        <FormGroup>\r\n                            <Input\r\n                                id={editSubTask.id}\r\n                                onChange={handleFieldChange}\r\n                                type=\"hidden\"\r\n                                value={editSubTask.id}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup>\r\n                            <Label for=\"name\">SubTask Name</Label>\r\n                            <Input\r\n                                id=\"name\"\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={editSubTask.name}\r\n\r\n                                onChange={(evt) => {\r\n                                    evt.preventDefault()\r\n                                    handleFieldChange(evt)\r\n                                }}\r\n                            />\r\n                        </FormGroup>\r\n\r\n                        <Input\r\n                            id={editSubTask.isComplete}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editSubTask.isComplete}\r\n                        />\r\n                        <Input\r\n                            id={editSubTask.taskId}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editSubTask.taskId}\r\n                        />\r\n                        <Input\r\n                            id={editSubTask.active}\r\n                            onChange={handleFieldChange}\r\n                            type=\"hidden\"\r\n                            value={editSubTask.active}\r\n                        />\r\n\r\n                        <FormGroup>\r\n\r\n                        </FormGroup>\r\n                    </Form>\r\n                    <Button\r\n\r\n                        color=\"warning \"\r\n                        onClick={editASubTask}\r\n\r\n                    >\r\n                        SUBMIT\r\n                    </Button>\r\n                    <Link to={`/board/${board.id}/task/${task.id}`}><Button type=\"button\" color=\"warning\">Cancel</Button></Link>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\nexport default SubTaskEditForm","C:\\Users\\faith\\workspace-43\\capstone\\TaskIt\\TaskIt\\client\\src\\providers\\PriorityProvider.js",[],{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","severity":1,"message":"156","line":27,"column":8,"nodeType":"157","endLine":27,"endColumn":10,"suggestions":"158"},{"ruleId":"159","severity":1,"message":"160","line":1,"column":40,"nodeType":"161","messageId":"162","endLine":1,"endColumn":48},{"ruleId":"155","severity":1,"message":"163","line":36,"column":8,"nodeType":"157","endLine":36,"endColumn":10,"suggestions":"164"},{"ruleId":"155","severity":1,"message":"165","line":43,"column":8,"nodeType":"157","endLine":43,"endColumn":10,"suggestions":"166"},{"ruleId":"155","severity":1,"message":"167","line":20,"column":8,"nodeType":"157","endLine":20,"endColumn":10,"suggestions":"168"},{"ruleId":"159","severity":1,"message":"169","line":1,"column":29,"nodeType":"161","messageId":"162","endLine":1,"endColumn":38},{"ruleId":"159","severity":1,"message":"160","line":1,"column":40,"nodeType":"161","messageId":"162","endLine":1,"endColumn":48},{"ruleId":"159","severity":1,"message":"170","line":7,"column":10,"nodeType":"161","messageId":"162","endLine":7,"endColumn":22},{"ruleId":"155","severity":1,"message":"171","line":37,"column":8,"nodeType":"157","endLine":37,"endColumn":10,"suggestions":"172"},{"ruleId":"155","severity":1,"message":"173","line":48,"column":8,"nodeType":"157","endLine":48,"endColumn":10,"suggestions":"174"},{"ruleId":"155","severity":1,"message":"175","line":23,"column":8,"nodeType":"157","endLine":23,"endColumn":10,"suggestions":"176"},{"ruleId":"155","severity":1,"message":"177","line":38,"column":8,"nodeType":"157","endLine":38,"endColumn":10,"suggestions":"178"},{"ruleId":"155","severity":1,"message":"179","line":19,"column":8,"nodeType":"157","endLine":19,"endColumn":10,"suggestions":"180"},{"ruleId":"159","severity":1,"message":"160","line":1,"column":40,"nodeType":"161","messageId":"162","endLine":1,"endColumn":48},{"ruleId":"155","severity":1,"message":"175","line":26,"column":8,"nodeType":"157","endLine":26,"endColumn":10,"suggestions":"181"},{"ruleId":"159","severity":1,"message":"170","line":12,"column":10,"nodeType":"161","messageId":"162","endLine":12,"endColumn":22},{"ruleId":"159","severity":1,"message":"182","line":13,"column":10,"nodeType":"161","messageId":"162","endLine":13,"endColumn":21},{"ruleId":"155","severity":1,"message":"183","line":50,"column":8,"nodeType":"157","endLine":50,"endColumn":10,"suggestions":"184"},{"ruleId":"155","severity":1,"message":"179","line":24,"column":8,"nodeType":"157","endLine":24,"endColumn":10,"suggestions":"185"},{"ruleId":"155","severity":1,"message":"179","line":44,"column":8,"nodeType":"157","endLine":44,"endColumn":10,"suggestions":"186"},{"ruleId":"155","severity":1,"message":"187","line":50,"column":8,"nodeType":"157","endLine":50,"endColumn":10,"suggestions":"188"},"no-native-reassign",["189"],"no-negated-in-lhs",["190"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllBoards'. Either include it or remove the dependency array.","ArrayExpression",["191"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'boardId', 'getBoardById', and 'getTasks'. Either include them or remove the dependency array.",["192"],"React Hook useEffect has missing dependencies: 'boardId' and 'getToken'. Either include them or remove the dependency array.",["193"],"React Hook useEffect has missing dependencies: 'boardId' and 'getBoardById'. Either include them or remove the dependency array.",["194"],"'useEffect' is defined but never used.","'BoardContext' is defined but never used.","React Hook useEffect has missing dependencies: 'getSubTasks', 'getTaskById', and 'taskId'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has missing dependencies: 'boardId' and 'task'. Either include them or remove the dependency array.",["196"],"React Hook useEffect has missing dependencies: 'getTaskById' and 'taskId'. Either include them or remove the dependency array.",["197"],"React Hook useEffect has missing dependencies: 'getToken' and 'taskId'. Either include them or remove the dependency array.",["198"],"React Hook useEffect has missing dependencies: 'getSubTaskById' and 'subTaskId'. Either include them or remove the dependency array.",["199"],["200"],"'TaskContext' is defined but never used.","React Hook useEffect has missing dependencies: 'boardId', 'subTask', and 'taskId'. Either include them or remove the dependency array.",["201"],["202"],["203"],"React Hook useEffect has a missing dependency: 'subTask'. Either include it or remove the dependency array.",["204"],"no-global-assign","no-unsafe-negation",{"desc":"205","fix":"206"},{"desc":"207","fix":"208"},{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},{"desc":"215","fix":"216"},{"desc":"217","fix":"218"},{"desc":"219","fix":"220"},{"desc":"221","fix":"222"},{"desc":"217","fix":"223"},{"desc":"224","fix":"225"},{"desc":"221","fix":"226"},{"desc":"221","fix":"227"},{"desc":"228","fix":"229"},"Update the dependencies array to be: [getAllBoards]",{"range":"230","text":"231"},"Update the dependencies array to be: [boardId, getBoardById, getTasks]",{"range":"232","text":"233"},"Update the dependencies array to be: [boardId, getToken]",{"range":"234","text":"235"},"Update the dependencies array to be: [boardId, getBoardById]",{"range":"236","text":"237"},"Update the dependencies array to be: [getSubTasks, getTaskById, taskId]",{"range":"238","text":"239"},"Update the dependencies array to be: [boardId, task]",{"range":"240","text":"241"},"Update the dependencies array to be: [getTaskById, taskId]",{"range":"242","text":"243"},"Update the dependencies array to be: [getToken, taskId]",{"range":"244","text":"245"},"Update the dependencies array to be: [getSubTaskById, subTaskId]",{"range":"246","text":"247"},{"range":"248","text":"243"},"Update the dependencies array to be: [boardId, subTask, taskId]",{"range":"249","text":"250"},{"range":"251","text":"247"},{"range":"252","text":"247"},"Update the dependencies array to be: [subTask]",{"range":"253","text":"254"},[987,989],"[getAllBoards]",[1813,1815],"[boardId, getBoardById, getTasks]",[1658,1660],"[boardId, getToken]",[879,881],"[boardId, getBoardById]",[1476,1478],"[getSubTasks, getTaskById, taskId]",[1721,1723],"[boardId, task]",[1160,1162],"[getTaskById, taskId]",[1063,1065],"[getToken, taskId]",[775,777],"[getSubTaskById, subTaskId]",[991,993],[1713,1715],"[boardId, subTask, taskId]",[1329,1331],[1500,1502],[1609,1611],"[subTask]"]